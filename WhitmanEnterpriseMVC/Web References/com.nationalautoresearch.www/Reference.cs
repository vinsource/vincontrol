//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.17929.
// 
#pragma warning disable 1591

namespace WhitmanEnterpriseMVC.com.nationalautoresearch.www {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="UsedCarWS", Namespace="http://localhost/webservices/UsedCarWS")]
    public partial class UsedCarWS : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private UserCredentials userCredentialsValueField;
        
        private System.Threading.SendOrPostCallback getYearsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getYears1OperationCompleted;
        
        private System.Threading.SendOrPostCallback getMakesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getMakes1OperationCompleted;
        
        private System.Threading.SendOrPostCallback getModelsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getModels1OperationCompleted;
        
        private System.Threading.SendOrPostCallback getSeriesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSeries1OperationCompleted;
        
        private System.Threading.SendOrPostCallback getStylesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getStyles1OperationCompleted;
        
        private System.Threading.SendOrPostCallback applyUSAdjustmentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback applyUSAdjustments1OperationCompleted;
        
        private System.Threading.SendOrPostCallback applyUSAdjustments2OperationCompleted;
        
        private System.Threading.SendOrPostCallback applyCanadianAdjustmentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback applyCanadianAdjustments1OperationCompleted;
        
        private System.Threading.SendOrPostCallback applyCanadianAdjustments2OperationCompleted;
        
        private System.Threading.SendOrPostCallback getValuesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getValues1OperationCompleted;
        
        private System.Threading.SendOrPostCallback getValues2OperationCompleted;
        
        private System.Threading.SendOrPostCallback getValues3OperationCompleted;
        
        private System.Threading.SendOrPostCallback getVINValuesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getVINValues1OperationCompleted;
        
        private System.Threading.SendOrPostCallback getVINValues2OperationCompleted;
        
        private System.Threading.SendOrPostCallback getVINValues3OperationCompleted;
        
        private System.Threading.SendOrPostCallback getVINValues4OperationCompleted;
        
        private System.Threading.SendOrPostCallback getVINValues5OperationCompleted;
        
        private System.Threading.SendOrPostCallback getVINValues6OperationCompleted;
        
        private System.Threading.SendOrPostCallback getVINValues7OperationCompleted;
        
        private System.Threading.SendOrPostCallback getMileageOperationCompleted;
        
        private System.Threading.SendOrPostCallback getMileageByFullYearOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCanadianMileageOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCanadianMileageByFullYearOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCanadianMileage1OperationCompleted;
        
        private System.Threading.SendOrPostCallback getCanadianMileageByFullYear1OperationCompleted;
        
        private System.Threading.SendOrPostCallback getMileage1OperationCompleted;
        
        private System.Threading.SendOrPostCallback getMileageByFullYear1OperationCompleted;
        
        private System.Threading.SendOrPostCallback getAddDeductsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAddDeductsByFullYearOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAddDeducts1OperationCompleted;
        
        private System.Threading.SendOrPostCallback getAddDeductsByFullYear1OperationCompleted;
        
        private System.Threading.SendOrPostCallback getSingleStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllStatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSingleProvinceOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllProvincesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getHistoricalProvincesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getStandardEquipmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback getStandardEquipment1OperationCompleted;
        
        private System.Threading.SendOrPostCallback getColorsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getColorsByFullYearOperationCompleted;
        
        private System.Threading.SendOrPostCallback getColors1OperationCompleted;
        
        private System.Threading.SendOrPostCallback getColorsByFullYear1OperationCompleted;
        
        private System.Threading.SendOrPostCallback getPhotoOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPDFSpecOperationCompleted;
        
        private System.Threading.SendOrPostCallback getTrendAnalysisValuesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getVehicleClassesOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public UsedCarWS() {
            this.Url = global::WhitmanEnterpriseMVC.Properties.Settings.Default.WhitmanEnterpriseMVC_com_nationalautoresearch_www_UsedCarWS;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public UserCredentials UserCredentialsValue {
            get {
                return this.userCredentialsValueField;
            }
            set {
                this.userCredentialsValueField = value;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event getYearsCompletedEventHandler getYearsCompleted;
        
        /// <remarks/>
        public event getYears1CompletedEventHandler getYears1Completed;
        
        /// <remarks/>
        public event getMakesCompletedEventHandler getMakesCompleted;
        
        /// <remarks/>
        public event getMakes1CompletedEventHandler getMakes1Completed;
        
        /// <remarks/>
        public event getModelsCompletedEventHandler getModelsCompleted;
        
        /// <remarks/>
        public event getModels1CompletedEventHandler getModels1Completed;
        
        /// <remarks/>
        public event getSeriesCompletedEventHandler getSeriesCompleted;
        
        /// <remarks/>
        public event getSeries1CompletedEventHandler getSeries1Completed;
        
        /// <remarks/>
        public event getStylesCompletedEventHandler getStylesCompleted;
        
        /// <remarks/>
        public event getStyles1CompletedEventHandler getStyles1Completed;
        
        /// <remarks/>
        public event applyUSAdjustmentsCompletedEventHandler applyUSAdjustmentsCompleted;
        
        /// <remarks/>
        public event applyUSAdjustments1CompletedEventHandler applyUSAdjustments1Completed;
        
        /// <remarks/>
        public event applyUSAdjustments2CompletedEventHandler applyUSAdjustments2Completed;
        
        /// <remarks/>
        public event applyCanadianAdjustmentsCompletedEventHandler applyCanadianAdjustmentsCompleted;
        
        /// <remarks/>
        public event applyCanadianAdjustments1CompletedEventHandler applyCanadianAdjustments1Completed;
        
        /// <remarks/>
        public event applyCanadianAdjustments2CompletedEventHandler applyCanadianAdjustments2Completed;
        
        /// <remarks/>
        public event getValuesCompletedEventHandler getValuesCompleted;
        
        /// <remarks/>
        public event getValues1CompletedEventHandler getValues1Completed;
        
        /// <remarks/>
        public event getValues2CompletedEventHandler getValues2Completed;
        
        /// <remarks/>
        public event getValues3CompletedEventHandler getValues3Completed;
        
        /// <remarks/>
        public event getVINValuesCompletedEventHandler getVINValuesCompleted;
        
        /// <remarks/>
        public event getVINValues1CompletedEventHandler getVINValues1Completed;
        
        /// <remarks/>
        public event getVINValues2CompletedEventHandler getVINValues2Completed;
        
        /// <remarks/>
        public event getVINValues3CompletedEventHandler getVINValues3Completed;
        
        /// <remarks/>
        public event getVINValues4CompletedEventHandler getVINValues4Completed;
        
        /// <remarks/>
        public event getVINValues5CompletedEventHandler getVINValues5Completed;
        
        /// <remarks/>
        public event getVINValues6CompletedEventHandler getVINValues6Completed;
        
        /// <remarks/>
        public event getVINValues7CompletedEventHandler getVINValues7Completed;
        
        /// <remarks/>
        public event getMileageCompletedEventHandler getMileageCompleted;
        
        /// <remarks/>
        public event getMileageByFullYearCompletedEventHandler getMileageByFullYearCompleted;
        
        /// <remarks/>
        public event getCanadianMileageCompletedEventHandler getCanadianMileageCompleted;
        
        /// <remarks/>
        public event getCanadianMileageByFullYearCompletedEventHandler getCanadianMileageByFullYearCompleted;
        
        /// <remarks/>
        public event getCanadianMileage1CompletedEventHandler getCanadianMileage1Completed;
        
        /// <remarks/>
        public event getCanadianMileageByFullYear1CompletedEventHandler getCanadianMileageByFullYear1Completed;
        
        /// <remarks/>
        public event getMileage1CompletedEventHandler getMileage1Completed;
        
        /// <remarks/>
        public event getMileageByFullYear1CompletedEventHandler getMileageByFullYear1Completed;
        
        /// <remarks/>
        public event getAddDeductsCompletedEventHandler getAddDeductsCompleted;
        
        /// <remarks/>
        public event getAddDeductsByFullYearCompletedEventHandler getAddDeductsByFullYearCompleted;
        
        /// <remarks/>
        public event getAddDeducts1CompletedEventHandler getAddDeducts1Completed;
        
        /// <remarks/>
        public event getAddDeductsByFullYear1CompletedEventHandler getAddDeductsByFullYear1Completed;
        
        /// <remarks/>
        public event getSingleStateCompletedEventHandler getSingleStateCompleted;
        
        /// <remarks/>
        public event getAllStatesCompletedEventHandler getAllStatesCompleted;
        
        /// <remarks/>
        public event getSingleProvinceCompletedEventHandler getSingleProvinceCompleted;
        
        /// <remarks/>
        public event getAllProvincesCompletedEventHandler getAllProvincesCompleted;
        
        /// <remarks/>
        public event getHistoricalProvincesCompletedEventHandler getHistoricalProvincesCompleted;
        
        /// <remarks/>
        public event getStandardEquipmentCompletedEventHandler getStandardEquipmentCompleted;
        
        /// <remarks/>
        public event getStandardEquipment1CompletedEventHandler getStandardEquipment1Completed;
        
        /// <remarks/>
        public event getColorsCompletedEventHandler getColorsCompleted;
        
        /// <remarks/>
        public event getColorsByFullYearCompletedEventHandler getColorsByFullYearCompleted;
        
        /// <remarks/>
        public event getColors1CompletedEventHandler getColors1Completed;
        
        /// <remarks/>
        public event getColorsByFullYear1CompletedEventHandler getColorsByFullYear1Completed;
        
        /// <remarks/>
        public event getPhotoCompletedEventHandler getPhotoCompleted;
        
        /// <remarks/>
        public event getPDFSpecCompletedEventHandler getPDFSpecCompleted;
        
        /// <remarks/>
        public event getTrendAnalysisValuesCompletedEventHandler getTrendAnalysisValuesCompleted;
        
        /// <remarks/>
        public event getVehicleClassesCompletedEventHandler getVehicleClassesCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/Years", RequestElementName="Years", RequestNamespace="http://localhost/webservices/UsedCarWS", ResponseElementName="YearsResponse", ResponseNamespace="http://localhost/webservices/UsedCarWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("YearsResult")]
        public System.Data.DataSet getYears(string sCountryCode) {
            object[] results = this.Invoke("getYears", new object[] {
                        sCountryCode});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getYearsAsync(string sCountryCode) {
            this.getYearsAsync(sCountryCode, null);
        }
        
        /// <remarks/>
        public void getYearsAsync(string sCountryCode, object userState) {
            if ((this.getYearsOperationCompleted == null)) {
                this.getYearsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetYearsOperationCompleted);
            }
            this.InvokeAsync("getYears", new object[] {
                        sCountryCode}, this.getYearsOperationCompleted, userState);
        }
        
        private void OngetYearsOperationCompleted(object arg) {
            if ((this.getYearsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getYearsCompleted(this, new getYearsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.WebMethodAttribute(MessageName="getYears1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/YearsByClass", RequestElementName="YearsByClass", RequestNamespace="http://localhost/webservices/UsedCarWS", ResponseElementName="YearsByClassResponse", ResponseNamespace="http://localhost/webservices/UsedCarWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("YearsByClassResult")]
        public System.Data.DataSet getYears(string sCountryCode, string sVehicleClass) {
            object[] results = this.Invoke("getYears1", new object[] {
                        sCountryCode,
                        sVehicleClass});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getYears1Async(string sCountryCode, string sVehicleClass) {
            this.getYears1Async(sCountryCode, sVehicleClass, null);
        }
        
        /// <remarks/>
        public void getYears1Async(string sCountryCode, string sVehicleClass, object userState) {
            if ((this.getYears1OperationCompleted == null)) {
                this.getYears1OperationCompleted = new System.Threading.SendOrPostCallback(this.OngetYears1OperationCompleted);
            }
            this.InvokeAsync("getYears1", new object[] {
                        sCountryCode,
                        sVehicleClass}, this.getYears1OperationCompleted, userState);
        }
        
        private void OngetYears1OperationCompleted(object arg) {
            if ((this.getYears1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getYears1Completed(this, new getYears1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/Makes", RequestElementName="Makes", RequestNamespace="http://localhost/webservices/UsedCarWS", ResponseElementName="MakesResponse", ResponseNamespace="http://localhost/webservices/UsedCarWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("MakesResult")]
        public System.Data.DataSet getMakes(string sCountryCode, string sYear) {
            object[] results = this.Invoke("getMakes", new object[] {
                        sCountryCode,
                        sYear});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getMakesAsync(string sCountryCode, string sYear) {
            this.getMakesAsync(sCountryCode, sYear, null);
        }
        
        /// <remarks/>
        public void getMakesAsync(string sCountryCode, string sYear, object userState) {
            if ((this.getMakesOperationCompleted == null)) {
                this.getMakesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMakesOperationCompleted);
            }
            this.InvokeAsync("getMakes", new object[] {
                        sCountryCode,
                        sYear}, this.getMakesOperationCompleted, userState);
        }
        
        private void OngetMakesOperationCompleted(object arg) {
            if ((this.getMakesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMakesCompleted(this, new getMakesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.WebMethodAttribute(MessageName="getMakes1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/MakesByClass", RequestElementName="MakesByClass", RequestNamespace="http://localhost/webservices/UsedCarWS", ResponseElementName="MakesByClassResponse", ResponseNamespace="http://localhost/webservices/UsedCarWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("MakesByClassResult")]
        public System.Data.DataSet getMakes(string sCountryCode, string sYear, string sVehicleClass) {
            object[] results = this.Invoke("getMakes1", new object[] {
                        sCountryCode,
                        sYear,
                        sVehicleClass});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getMakes1Async(string sCountryCode, string sYear, string sVehicleClass) {
            this.getMakes1Async(sCountryCode, sYear, sVehicleClass, null);
        }
        
        /// <remarks/>
        public void getMakes1Async(string sCountryCode, string sYear, string sVehicleClass, object userState) {
            if ((this.getMakes1OperationCompleted == null)) {
                this.getMakes1OperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMakes1OperationCompleted);
            }
            this.InvokeAsync("getMakes1", new object[] {
                        sCountryCode,
                        sYear,
                        sVehicleClass}, this.getMakes1OperationCompleted, userState);
        }
        
        private void OngetMakes1OperationCompleted(object arg) {
            if ((this.getMakes1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMakes1Completed(this, new getMakes1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/Models", RequestElementName="Models", RequestNamespace="http://localhost/webservices/UsedCarWS", ResponseElementName="ModelsResponse", ResponseNamespace="http://localhost/webservices/UsedCarWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ModelsResult")]
        public System.Data.DataSet getModels(string sCountryCode, string sYear, string sMake) {
            object[] results = this.Invoke("getModels", new object[] {
                        sCountryCode,
                        sYear,
                        sMake});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getModelsAsync(string sCountryCode, string sYear, string sMake) {
            this.getModelsAsync(sCountryCode, sYear, sMake, null);
        }
        
        /// <remarks/>
        public void getModelsAsync(string sCountryCode, string sYear, string sMake, object userState) {
            if ((this.getModelsOperationCompleted == null)) {
                this.getModelsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetModelsOperationCompleted);
            }
            this.InvokeAsync("getModels", new object[] {
                        sCountryCode,
                        sYear,
                        sMake}, this.getModelsOperationCompleted, userState);
        }
        
        private void OngetModelsOperationCompleted(object arg) {
            if ((this.getModelsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getModelsCompleted(this, new getModelsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.WebMethodAttribute(MessageName="getModels1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/ModelsByClass", RequestElementName="ModelsByClass", RequestNamespace="http://localhost/webservices/UsedCarWS", ResponseElementName="ModelsByClassResponse", ResponseNamespace="http://localhost/webservices/UsedCarWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ModelsByClassResult")]
        public System.Data.DataSet getModels(string sCountryCode, string sYear, string sMake, string sVehicleClass) {
            object[] results = this.Invoke("getModels1", new object[] {
                        sCountryCode,
                        sYear,
                        sMake,
                        sVehicleClass});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getModels1Async(string sCountryCode, string sYear, string sMake, string sVehicleClass) {
            this.getModels1Async(sCountryCode, sYear, sMake, sVehicleClass, null);
        }
        
        /// <remarks/>
        public void getModels1Async(string sCountryCode, string sYear, string sMake, string sVehicleClass, object userState) {
            if ((this.getModels1OperationCompleted == null)) {
                this.getModels1OperationCompleted = new System.Threading.SendOrPostCallback(this.OngetModels1OperationCompleted);
            }
            this.InvokeAsync("getModels1", new object[] {
                        sCountryCode,
                        sYear,
                        sMake,
                        sVehicleClass}, this.getModels1OperationCompleted, userState);
        }
        
        private void OngetModels1OperationCompleted(object arg) {
            if ((this.getModels1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getModels1Completed(this, new getModels1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/Series", RequestElementName="Series", RequestNamespace="http://localhost/webservices/UsedCarWS", ResponseElementName="SeriesResponse", ResponseNamespace="http://localhost/webservices/UsedCarWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("SeriesResult")]
        public System.Data.DataSet getSeries(string sCountryCode, string sYear, string sMake, string sModel) {
            object[] results = this.Invoke("getSeries", new object[] {
                        sCountryCode,
                        sYear,
                        sMake,
                        sModel});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getSeriesAsync(string sCountryCode, string sYear, string sMake, string sModel) {
            this.getSeriesAsync(sCountryCode, sYear, sMake, sModel, null);
        }
        
        /// <remarks/>
        public void getSeriesAsync(string sCountryCode, string sYear, string sMake, string sModel, object userState) {
            if ((this.getSeriesOperationCompleted == null)) {
                this.getSeriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSeriesOperationCompleted);
            }
            this.InvokeAsync("getSeries", new object[] {
                        sCountryCode,
                        sYear,
                        sMake,
                        sModel}, this.getSeriesOperationCompleted, userState);
        }
        
        private void OngetSeriesOperationCompleted(object arg) {
            if ((this.getSeriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSeriesCompleted(this, new getSeriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.WebMethodAttribute(MessageName="getSeries1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/SeriesByClass", RequestElementName="SeriesByClass", RequestNamespace="http://localhost/webservices/UsedCarWS", ResponseElementName="SeriesByClassResponse", ResponseNamespace="http://localhost/webservices/UsedCarWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("SeriesByClassResult")]
        public System.Data.DataSet getSeries(string sCountryCode, string sYear, string sMake, string sModel, string sVehicleClass) {
            object[] results = this.Invoke("getSeries1", new object[] {
                        sCountryCode,
                        sYear,
                        sMake,
                        sModel,
                        sVehicleClass});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getSeries1Async(string sCountryCode, string sYear, string sMake, string sModel, string sVehicleClass) {
            this.getSeries1Async(sCountryCode, sYear, sMake, sModel, sVehicleClass, null);
        }
        
        /// <remarks/>
        public void getSeries1Async(string sCountryCode, string sYear, string sMake, string sModel, string sVehicleClass, object userState) {
            if ((this.getSeries1OperationCompleted == null)) {
                this.getSeries1OperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSeries1OperationCompleted);
            }
            this.InvokeAsync("getSeries1", new object[] {
                        sCountryCode,
                        sYear,
                        sMake,
                        sModel,
                        sVehicleClass}, this.getSeries1OperationCompleted, userState);
        }
        
        private void OngetSeries1OperationCompleted(object arg) {
            if ((this.getSeries1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSeries1Completed(this, new getSeries1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/BodyStyles", RequestElementName="BodyStyles", RequestNamespace="http://localhost/webservices/UsedCarWS", ResponseElementName="BodyStylesResponse", ResponseNamespace="http://localhost/webservices/UsedCarWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("BodyStylesResult")]
        public System.Data.DataSet getStyles(string sCountryCode, string sYear, string sMake, string sModel, string sSeries) {
            object[] results = this.Invoke("getStyles", new object[] {
                        sCountryCode,
                        sYear,
                        sMake,
                        sModel,
                        sSeries});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getStylesAsync(string sCountryCode, string sYear, string sMake, string sModel, string sSeries) {
            this.getStylesAsync(sCountryCode, sYear, sMake, sModel, sSeries, null);
        }
        
        /// <remarks/>
        public void getStylesAsync(string sCountryCode, string sYear, string sMake, string sModel, string sSeries, object userState) {
            if ((this.getStylesOperationCompleted == null)) {
                this.getStylesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetStylesOperationCompleted);
            }
            this.InvokeAsync("getStyles", new object[] {
                        sCountryCode,
                        sYear,
                        sMake,
                        sModel,
                        sSeries}, this.getStylesOperationCompleted, userState);
        }
        
        private void OngetStylesOperationCompleted(object arg) {
            if ((this.getStylesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getStylesCompleted(this, new getStylesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.WebMethodAttribute(MessageName="getStyles1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/BodyStylesByClass", RequestElementName="BodyStylesByClass", RequestNamespace="http://localhost/webservices/UsedCarWS", ResponseElementName="BodyStylesByClassResponse", ResponseNamespace="http://localhost/webservices/UsedCarWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("BodyStylesByClassResult")]
        public System.Data.DataSet getStyles(string sCountryCode, string sYear, string sMake, string sModel, string sSeries, string sVehicleClass) {
            object[] results = this.Invoke("getStyles1", new object[] {
                        sCountryCode,
                        sYear,
                        sMake,
                        sModel,
                        sSeries,
                        sVehicleClass});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getStyles1Async(string sCountryCode, string sYear, string sMake, string sModel, string sSeries, string sVehicleClass) {
            this.getStyles1Async(sCountryCode, sYear, sMake, sModel, sSeries, sVehicleClass, null);
        }
        
        /// <remarks/>
        public void getStyles1Async(string sCountryCode, string sYear, string sMake, string sModel, string sSeries, string sVehicleClass, object userState) {
            if ((this.getStyles1OperationCompleted == null)) {
                this.getStyles1OperationCompleted = new System.Threading.SendOrPostCallback(this.OngetStyles1OperationCompleted);
            }
            this.InvokeAsync("getStyles1", new object[] {
                        sCountryCode,
                        sYear,
                        sMake,
                        sModel,
                        sSeries,
                        sVehicleClass}, this.getStyles1OperationCompleted, userState);
        }
        
        private void OngetStyles1OperationCompleted(object arg) {
            if ((this.getStyles1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getStyles1Completed(this, new getStyles1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/ApplyUSHistoricalAdjustments", RequestElementName="ApplyUSHistoricalAdjustments", RequestNamespace="http://localhost/webservices/UsedCarWS", ResponseElementName="ApplyUSHistoricalAdjustmentsResponse", ResponseNamespace="http://localhost/webservices/UsedCarWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ApplyUSHistoricalAdjustmentsResult")]
        public System.Data.DataSet applyUSAdjustments(
                    System.Data.DataSet ds, 
                    string sFrequencyCode, 
                    int iMileage, 
                    string sState, 
                    int iExtraCleanAddDeductAdj, 
                    int iCleanAddDeductAdj, 
                    int iAverageAddDeductAdj, 
                    int iRoughAddDeductAdj, 
                    int i12MonthResidualAdj, 
                    int i24MonthResidualAdj, 
                    int i30MonthResidualAdj, 
                    int i36MonthResidualAdj, 
                    int i42MonthResidualAdj, 
                    int i48MonthResidualAdj, 
                    int i60MonthResidualAdj, 
                    int i72MonthResidualAdj, 
                    System.DateTime dHistoricalDate) {
            object[] results = this.Invoke("applyUSAdjustments", new object[] {
                        ds,
                        sFrequencyCode,
                        iMileage,
                        sState,
                        iExtraCleanAddDeductAdj,
                        iCleanAddDeductAdj,
                        iAverageAddDeductAdj,
                        iRoughAddDeductAdj,
                        i12MonthResidualAdj,
                        i24MonthResidualAdj,
                        i30MonthResidualAdj,
                        i36MonthResidualAdj,
                        i42MonthResidualAdj,
                        i48MonthResidualAdj,
                        i60MonthResidualAdj,
                        i72MonthResidualAdj,
                        dHistoricalDate});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void applyUSAdjustmentsAsync(
                    System.Data.DataSet ds, 
                    string sFrequencyCode, 
                    int iMileage, 
                    string sState, 
                    int iExtraCleanAddDeductAdj, 
                    int iCleanAddDeductAdj, 
                    int iAverageAddDeductAdj, 
                    int iRoughAddDeductAdj, 
                    int i12MonthResidualAdj, 
                    int i24MonthResidualAdj, 
                    int i30MonthResidualAdj, 
                    int i36MonthResidualAdj, 
                    int i42MonthResidualAdj, 
                    int i48MonthResidualAdj, 
                    int i60MonthResidualAdj, 
                    int i72MonthResidualAdj, 
                    System.DateTime dHistoricalDate) {
            this.applyUSAdjustmentsAsync(ds, sFrequencyCode, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, i12MonthResidualAdj, i24MonthResidualAdj, i30MonthResidualAdj, i36MonthResidualAdj, i42MonthResidualAdj, i48MonthResidualAdj, i60MonthResidualAdj, i72MonthResidualAdj, dHistoricalDate, null);
        }
        
        /// <remarks/>
        public void applyUSAdjustmentsAsync(
                    System.Data.DataSet ds, 
                    string sFrequencyCode, 
                    int iMileage, 
                    string sState, 
                    int iExtraCleanAddDeductAdj, 
                    int iCleanAddDeductAdj, 
                    int iAverageAddDeductAdj, 
                    int iRoughAddDeductAdj, 
                    int i12MonthResidualAdj, 
                    int i24MonthResidualAdj, 
                    int i30MonthResidualAdj, 
                    int i36MonthResidualAdj, 
                    int i42MonthResidualAdj, 
                    int i48MonthResidualAdj, 
                    int i60MonthResidualAdj, 
                    int i72MonthResidualAdj, 
                    System.DateTime dHistoricalDate, 
                    object userState) {
            if ((this.applyUSAdjustmentsOperationCompleted == null)) {
                this.applyUSAdjustmentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnapplyUSAdjustmentsOperationCompleted);
            }
            this.InvokeAsync("applyUSAdjustments", new object[] {
                        ds,
                        sFrequencyCode,
                        iMileage,
                        sState,
                        iExtraCleanAddDeductAdj,
                        iCleanAddDeductAdj,
                        iAverageAddDeductAdj,
                        iRoughAddDeductAdj,
                        i12MonthResidualAdj,
                        i24MonthResidualAdj,
                        i30MonthResidualAdj,
                        i36MonthResidualAdj,
                        i42MonthResidualAdj,
                        i48MonthResidualAdj,
                        i60MonthResidualAdj,
                        i72MonthResidualAdj,
                        dHistoricalDate}, this.applyUSAdjustmentsOperationCompleted, userState);
        }
        
        private void OnapplyUSAdjustmentsOperationCompleted(object arg) {
            if ((this.applyUSAdjustmentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.applyUSAdjustmentsCompleted(this, new applyUSAdjustmentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.WebMethodAttribute(MessageName="applyUSAdjustments1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/ApplyUSAdjWithMilesPerYear", RequestElementName="ApplyUSAdjWithMilesPerYear", RequestNamespace="http://localhost/webservices/UsedCarWS", ResponseElementName="ApplyUSAdjWithMilesPerYearResponse", ResponseNamespace="http://localhost/webservices/UsedCarWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ApplyUSAdjWithMilesPerYearResult")]
        public System.Data.DataSet applyUSAdjustments(
                    System.Data.DataSet ds, 
                    string sFrequencyCode, 
                    int iMileage, 
                    string sState, 
                    int iExtraCleanAddDeductAdj, 
                    int iCleanAddDeductAdj, 
                    int iAverageAddDeductAdj, 
                    int iRoughAddDeductAdj, 
                    int i12MonthResidualAdj, 
                    int i24MonthResidualAdj, 
                    int i30MonthResidualAdj, 
                    int i36MonthResidualAdj, 
                    int i42MonthResidualAdj, 
                    int i48MonthResidualAdj, 
                    int i60MonthResidualAdj, 
                    int i72MonthResidualAdj, 
                    System.DateTime dHistoricalDate, 
                    int iMilesPerYear) {
            object[] results = this.Invoke("applyUSAdjustments1", new object[] {
                        ds,
                        sFrequencyCode,
                        iMileage,
                        sState,
                        iExtraCleanAddDeductAdj,
                        iCleanAddDeductAdj,
                        iAverageAddDeductAdj,
                        iRoughAddDeductAdj,
                        i12MonthResidualAdj,
                        i24MonthResidualAdj,
                        i30MonthResidualAdj,
                        i36MonthResidualAdj,
                        i42MonthResidualAdj,
                        i48MonthResidualAdj,
                        i60MonthResidualAdj,
                        i72MonthResidualAdj,
                        dHistoricalDate,
                        iMilesPerYear});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void applyUSAdjustments1Async(
                    System.Data.DataSet ds, 
                    string sFrequencyCode, 
                    int iMileage, 
                    string sState, 
                    int iExtraCleanAddDeductAdj, 
                    int iCleanAddDeductAdj, 
                    int iAverageAddDeductAdj, 
                    int iRoughAddDeductAdj, 
                    int i12MonthResidualAdj, 
                    int i24MonthResidualAdj, 
                    int i30MonthResidualAdj, 
                    int i36MonthResidualAdj, 
                    int i42MonthResidualAdj, 
                    int i48MonthResidualAdj, 
                    int i60MonthResidualAdj, 
                    int i72MonthResidualAdj, 
                    System.DateTime dHistoricalDate, 
                    int iMilesPerYear) {
            this.applyUSAdjustments1Async(ds, sFrequencyCode, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, i12MonthResidualAdj, i24MonthResidualAdj, i30MonthResidualAdj, i36MonthResidualAdj, i42MonthResidualAdj, i48MonthResidualAdj, i60MonthResidualAdj, i72MonthResidualAdj, dHistoricalDate, iMilesPerYear, null);
        }
        
        /// <remarks/>
        public void applyUSAdjustments1Async(
                    System.Data.DataSet ds, 
                    string sFrequencyCode, 
                    int iMileage, 
                    string sState, 
                    int iExtraCleanAddDeductAdj, 
                    int iCleanAddDeductAdj, 
                    int iAverageAddDeductAdj, 
                    int iRoughAddDeductAdj, 
                    int i12MonthResidualAdj, 
                    int i24MonthResidualAdj, 
                    int i30MonthResidualAdj, 
                    int i36MonthResidualAdj, 
                    int i42MonthResidualAdj, 
                    int i48MonthResidualAdj, 
                    int i60MonthResidualAdj, 
                    int i72MonthResidualAdj, 
                    System.DateTime dHistoricalDate, 
                    int iMilesPerYear, 
                    object userState) {
            if ((this.applyUSAdjustments1OperationCompleted == null)) {
                this.applyUSAdjustments1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnapplyUSAdjustments1OperationCompleted);
            }
            this.InvokeAsync("applyUSAdjustments1", new object[] {
                        ds,
                        sFrequencyCode,
                        iMileage,
                        sState,
                        iExtraCleanAddDeductAdj,
                        iCleanAddDeductAdj,
                        iAverageAddDeductAdj,
                        iRoughAddDeductAdj,
                        i12MonthResidualAdj,
                        i24MonthResidualAdj,
                        i30MonthResidualAdj,
                        i36MonthResidualAdj,
                        i42MonthResidualAdj,
                        i48MonthResidualAdj,
                        i60MonthResidualAdj,
                        i72MonthResidualAdj,
                        dHistoricalDate,
                        iMilesPerYear}, this.applyUSAdjustments1OperationCompleted, userState);
        }
        
        private void OnapplyUSAdjustments1OperationCompleted(object arg) {
            if ((this.applyUSAdjustments1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.applyUSAdjustments1Completed(this, new applyUSAdjustments1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.WebMethodAttribute(MessageName="applyUSAdjustments2")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/ApplyUSCurrentAdjustments", RequestElementName="ApplyUSCurrentAdjustments", RequestNamespace="http://localhost/webservices/UsedCarWS", ResponseElementName="ApplyUSCurrentAdjustmentsResponse", ResponseNamespace="http://localhost/webservices/UsedCarWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ApplyUSCurrentAdjustmentsResult")]
        public System.Data.DataSet applyUSAdjustments(
                    System.Data.DataSet ds, 
                    string sFrequencyCode, 
                    int iMileage, 
                    string sState, 
                    int iExtraCleanAddDeductAdj, 
                    int iCleanAddDeductAdj, 
                    int iAverageAddDeductAdj, 
                    int iRoughAddDeductAdj, 
                    int i12MonthResidualAdj, 
                    int i24MonthResidualAdj, 
                    int i30MonthResidualAdj, 
                    int i36MonthResidualAdj, 
                    int i42MonthResidualAdj, 
                    int i48MonthResidualAdj, 
                    int i60MonthResidualAdj, 
                    int i72MonthResidualAdj) {
            object[] results = this.Invoke("applyUSAdjustments2", new object[] {
                        ds,
                        sFrequencyCode,
                        iMileage,
                        sState,
                        iExtraCleanAddDeductAdj,
                        iCleanAddDeductAdj,
                        iAverageAddDeductAdj,
                        iRoughAddDeductAdj,
                        i12MonthResidualAdj,
                        i24MonthResidualAdj,
                        i30MonthResidualAdj,
                        i36MonthResidualAdj,
                        i42MonthResidualAdj,
                        i48MonthResidualAdj,
                        i60MonthResidualAdj,
                        i72MonthResidualAdj});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void applyUSAdjustments2Async(
                    System.Data.DataSet ds, 
                    string sFrequencyCode, 
                    int iMileage, 
                    string sState, 
                    int iExtraCleanAddDeductAdj, 
                    int iCleanAddDeductAdj, 
                    int iAverageAddDeductAdj, 
                    int iRoughAddDeductAdj, 
                    int i12MonthResidualAdj, 
                    int i24MonthResidualAdj, 
                    int i30MonthResidualAdj, 
                    int i36MonthResidualAdj, 
                    int i42MonthResidualAdj, 
                    int i48MonthResidualAdj, 
                    int i60MonthResidualAdj, 
                    int i72MonthResidualAdj) {
            this.applyUSAdjustments2Async(ds, sFrequencyCode, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, i12MonthResidualAdj, i24MonthResidualAdj, i30MonthResidualAdj, i36MonthResidualAdj, i42MonthResidualAdj, i48MonthResidualAdj, i60MonthResidualAdj, i72MonthResidualAdj, null);
        }
        
        /// <remarks/>
        public void applyUSAdjustments2Async(
                    System.Data.DataSet ds, 
                    string sFrequencyCode, 
                    int iMileage, 
                    string sState, 
                    int iExtraCleanAddDeductAdj, 
                    int iCleanAddDeductAdj, 
                    int iAverageAddDeductAdj, 
                    int iRoughAddDeductAdj, 
                    int i12MonthResidualAdj, 
                    int i24MonthResidualAdj, 
                    int i30MonthResidualAdj, 
                    int i36MonthResidualAdj, 
                    int i42MonthResidualAdj, 
                    int i48MonthResidualAdj, 
                    int i60MonthResidualAdj, 
                    int i72MonthResidualAdj, 
                    object userState) {
            if ((this.applyUSAdjustments2OperationCompleted == null)) {
                this.applyUSAdjustments2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnapplyUSAdjustments2OperationCompleted);
            }
            this.InvokeAsync("applyUSAdjustments2", new object[] {
                        ds,
                        sFrequencyCode,
                        iMileage,
                        sState,
                        iExtraCleanAddDeductAdj,
                        iCleanAddDeductAdj,
                        iAverageAddDeductAdj,
                        iRoughAddDeductAdj,
                        i12MonthResidualAdj,
                        i24MonthResidualAdj,
                        i30MonthResidualAdj,
                        i36MonthResidualAdj,
                        i42MonthResidualAdj,
                        i48MonthResidualAdj,
                        i60MonthResidualAdj,
                        i72MonthResidualAdj}, this.applyUSAdjustments2OperationCompleted, userState);
        }
        
        private void OnapplyUSAdjustments2OperationCompleted(object arg) {
            if ((this.applyUSAdjustments2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.applyUSAdjustments2Completed(this, new applyUSAdjustments2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/ApplyCanadaHistoricalAdjustments", RequestElementName="ApplyCanadaHistoricalAdjustments", RequestNamespace="http://localhost/webservices/UsedCarWS", ResponseElementName="ApplyCanadaHistoricalAdjustmentsResponse", ResponseNamespace="http://localhost/webservices/UsedCarWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ApplyCanadaHistoricalAdjustmentsResult")]
        public System.Data.DataSet applyCanadianAdjustments(
                    System.Data.DataSet ds, 
                    string sFrequencyCode, 
                    int iMileage, 
                    string sProvince, 
                    int iExtraCleanAddDeductAdj, 
                    int iCleanAddDeductAdj, 
                    int iAverageAddDeductAdj, 
                    int iRoughAddDeductAdj, 
                    int i12MonthResidualAdj, 
                    int i24MonthResidualAdj, 
                    int i30MonthResidualAdj, 
                    int i36MonthResidualAdj, 
                    int i42MonthResidualAdj, 
                    int i48MonthResidualAdj, 
                    int i60MonthResidualAdj, 
                    int i72MonthResidualAdj, 
                    System.DateTime dHistoricalDate) {
            object[] results = this.Invoke("applyCanadianAdjustments", new object[] {
                        ds,
                        sFrequencyCode,
                        iMileage,
                        sProvince,
                        iExtraCleanAddDeductAdj,
                        iCleanAddDeductAdj,
                        iAverageAddDeductAdj,
                        iRoughAddDeductAdj,
                        i12MonthResidualAdj,
                        i24MonthResidualAdj,
                        i30MonthResidualAdj,
                        i36MonthResidualAdj,
                        i42MonthResidualAdj,
                        i48MonthResidualAdj,
                        i60MonthResidualAdj,
                        i72MonthResidualAdj,
                        dHistoricalDate});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void applyCanadianAdjustmentsAsync(
                    System.Data.DataSet ds, 
                    string sFrequencyCode, 
                    int iMileage, 
                    string sProvince, 
                    int iExtraCleanAddDeductAdj, 
                    int iCleanAddDeductAdj, 
                    int iAverageAddDeductAdj, 
                    int iRoughAddDeductAdj, 
                    int i12MonthResidualAdj, 
                    int i24MonthResidualAdj, 
                    int i30MonthResidualAdj, 
                    int i36MonthResidualAdj, 
                    int i42MonthResidualAdj, 
                    int i48MonthResidualAdj, 
                    int i60MonthResidualAdj, 
                    int i72MonthResidualAdj, 
                    System.DateTime dHistoricalDate) {
            this.applyCanadianAdjustmentsAsync(ds, sFrequencyCode, iMileage, sProvince, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, i12MonthResidualAdj, i24MonthResidualAdj, i30MonthResidualAdj, i36MonthResidualAdj, i42MonthResidualAdj, i48MonthResidualAdj, i60MonthResidualAdj, i72MonthResidualAdj, dHistoricalDate, null);
        }
        
        /// <remarks/>
        public void applyCanadianAdjustmentsAsync(
                    System.Data.DataSet ds, 
                    string sFrequencyCode, 
                    int iMileage, 
                    string sProvince, 
                    int iExtraCleanAddDeductAdj, 
                    int iCleanAddDeductAdj, 
                    int iAverageAddDeductAdj, 
                    int iRoughAddDeductAdj, 
                    int i12MonthResidualAdj, 
                    int i24MonthResidualAdj, 
                    int i30MonthResidualAdj, 
                    int i36MonthResidualAdj, 
                    int i42MonthResidualAdj, 
                    int i48MonthResidualAdj, 
                    int i60MonthResidualAdj, 
                    int i72MonthResidualAdj, 
                    System.DateTime dHistoricalDate, 
                    object userState) {
            if ((this.applyCanadianAdjustmentsOperationCompleted == null)) {
                this.applyCanadianAdjustmentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnapplyCanadianAdjustmentsOperationCompleted);
            }
            this.InvokeAsync("applyCanadianAdjustments", new object[] {
                        ds,
                        sFrequencyCode,
                        iMileage,
                        sProvince,
                        iExtraCleanAddDeductAdj,
                        iCleanAddDeductAdj,
                        iAverageAddDeductAdj,
                        iRoughAddDeductAdj,
                        i12MonthResidualAdj,
                        i24MonthResidualAdj,
                        i30MonthResidualAdj,
                        i36MonthResidualAdj,
                        i42MonthResidualAdj,
                        i48MonthResidualAdj,
                        i60MonthResidualAdj,
                        i72MonthResidualAdj,
                        dHistoricalDate}, this.applyCanadianAdjustmentsOperationCompleted, userState);
        }
        
        private void OnapplyCanadianAdjustmentsOperationCompleted(object arg) {
            if ((this.applyCanadianAdjustmentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.applyCanadianAdjustmentsCompleted(this, new applyCanadianAdjustmentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.WebMethodAttribute(MessageName="applyCanadianAdjustments1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/ApplyCanadaAdjWithMilesPerYear", RequestElementName="ApplyCanadaAdjWithMilesPerYear", RequestNamespace="http://localhost/webservices/UsedCarWS", ResponseElementName="ApplyCanadaAdjWithMilesPerYearResponse", ResponseNamespace="http://localhost/webservices/UsedCarWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ApplyCanadaAdjWithMilesPerYearResult")]
        public System.Data.DataSet applyCanadianAdjustments(
                    System.Data.DataSet ds, 
                    string sFrequencyCode, 
                    int iMileage, 
                    string sProvince, 
                    int iExtraCleanAddDeductAdj, 
                    int iCleanAddDeductAdj, 
                    int iAverageAddDeductAdj, 
                    int iRoughAddDeductAdj, 
                    int i12MonthResidualAdj, 
                    int i24MonthResidualAdj, 
                    int i30MonthResidualAdj, 
                    int i36MonthResidualAdj, 
                    int i42MonthResidualAdj, 
                    int i48MonthResidualAdj, 
                    int i60MonthResidualAdj, 
                    int i72MonthResidualAdj, 
                    System.DateTime dHistoricalDate, 
                    int iMilesPerYear) {
            object[] results = this.Invoke("applyCanadianAdjustments1", new object[] {
                        ds,
                        sFrequencyCode,
                        iMileage,
                        sProvince,
                        iExtraCleanAddDeductAdj,
                        iCleanAddDeductAdj,
                        iAverageAddDeductAdj,
                        iRoughAddDeductAdj,
                        i12MonthResidualAdj,
                        i24MonthResidualAdj,
                        i30MonthResidualAdj,
                        i36MonthResidualAdj,
                        i42MonthResidualAdj,
                        i48MonthResidualAdj,
                        i60MonthResidualAdj,
                        i72MonthResidualAdj,
                        dHistoricalDate,
                        iMilesPerYear});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void applyCanadianAdjustments1Async(
                    System.Data.DataSet ds, 
                    string sFrequencyCode, 
                    int iMileage, 
                    string sProvince, 
                    int iExtraCleanAddDeductAdj, 
                    int iCleanAddDeductAdj, 
                    int iAverageAddDeductAdj, 
                    int iRoughAddDeductAdj, 
                    int i12MonthResidualAdj, 
                    int i24MonthResidualAdj, 
                    int i30MonthResidualAdj, 
                    int i36MonthResidualAdj, 
                    int i42MonthResidualAdj, 
                    int i48MonthResidualAdj, 
                    int i60MonthResidualAdj, 
                    int i72MonthResidualAdj, 
                    System.DateTime dHistoricalDate, 
                    int iMilesPerYear) {
            this.applyCanadianAdjustments1Async(ds, sFrequencyCode, iMileage, sProvince, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, i12MonthResidualAdj, i24MonthResidualAdj, i30MonthResidualAdj, i36MonthResidualAdj, i42MonthResidualAdj, i48MonthResidualAdj, i60MonthResidualAdj, i72MonthResidualAdj, dHistoricalDate, iMilesPerYear, null);
        }
        
        /// <remarks/>
        public void applyCanadianAdjustments1Async(
                    System.Data.DataSet ds, 
                    string sFrequencyCode, 
                    int iMileage, 
                    string sProvince, 
                    int iExtraCleanAddDeductAdj, 
                    int iCleanAddDeductAdj, 
                    int iAverageAddDeductAdj, 
                    int iRoughAddDeductAdj, 
                    int i12MonthResidualAdj, 
                    int i24MonthResidualAdj, 
                    int i30MonthResidualAdj, 
                    int i36MonthResidualAdj, 
                    int i42MonthResidualAdj, 
                    int i48MonthResidualAdj, 
                    int i60MonthResidualAdj, 
                    int i72MonthResidualAdj, 
                    System.DateTime dHistoricalDate, 
                    int iMilesPerYear, 
                    object userState) {
            if ((this.applyCanadianAdjustments1OperationCompleted == null)) {
                this.applyCanadianAdjustments1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnapplyCanadianAdjustments1OperationCompleted);
            }
            this.InvokeAsync("applyCanadianAdjustments1", new object[] {
                        ds,
                        sFrequencyCode,
                        iMileage,
                        sProvince,
                        iExtraCleanAddDeductAdj,
                        iCleanAddDeductAdj,
                        iAverageAddDeductAdj,
                        iRoughAddDeductAdj,
                        i12MonthResidualAdj,
                        i24MonthResidualAdj,
                        i30MonthResidualAdj,
                        i36MonthResidualAdj,
                        i42MonthResidualAdj,
                        i48MonthResidualAdj,
                        i60MonthResidualAdj,
                        i72MonthResidualAdj,
                        dHistoricalDate,
                        iMilesPerYear}, this.applyCanadianAdjustments1OperationCompleted, userState);
        }
        
        private void OnapplyCanadianAdjustments1OperationCompleted(object arg) {
            if ((this.applyCanadianAdjustments1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.applyCanadianAdjustments1Completed(this, new applyCanadianAdjustments1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.WebMethodAttribute(MessageName="applyCanadianAdjustments2")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/ApplyCanadaCurrentAdjustments", RequestElementName="ApplyCanadaCurrentAdjustments", RequestNamespace="http://localhost/webservices/UsedCarWS", ResponseElementName="ApplyCanadaCurrentAdjustmentsResponse", ResponseNamespace="http://localhost/webservices/UsedCarWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ApplyCanadaCurrentAdjustmentsResult")]
        public System.Data.DataSet applyCanadianAdjustments(
                    System.Data.DataSet ds, 
                    string sFrequencyCode, 
                    int iMileage, 
                    string sState, 
                    int iExtraCleanAddDeductAdj, 
                    int iCleanAddDeductAdj, 
                    int iAverageAddDeductAdj, 
                    int iRoughAddDeductAdj, 
                    int i12MonthResidualAdj, 
                    int i24MonthResidualAdj, 
                    int i30MonthResidualAdj, 
                    int i36MonthResidualAdj, 
                    int i42MonthResidualAdj, 
                    int i48MonthResidualAdj, 
                    int i60MonthResidualAdj, 
                    int i72MonthResidualAdj) {
            object[] results = this.Invoke("applyCanadianAdjustments2", new object[] {
                        ds,
                        sFrequencyCode,
                        iMileage,
                        sState,
                        iExtraCleanAddDeductAdj,
                        iCleanAddDeductAdj,
                        iAverageAddDeductAdj,
                        iRoughAddDeductAdj,
                        i12MonthResidualAdj,
                        i24MonthResidualAdj,
                        i30MonthResidualAdj,
                        i36MonthResidualAdj,
                        i42MonthResidualAdj,
                        i48MonthResidualAdj,
                        i60MonthResidualAdj,
                        i72MonthResidualAdj});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void applyCanadianAdjustments2Async(
                    System.Data.DataSet ds, 
                    string sFrequencyCode, 
                    int iMileage, 
                    string sState, 
                    int iExtraCleanAddDeductAdj, 
                    int iCleanAddDeductAdj, 
                    int iAverageAddDeductAdj, 
                    int iRoughAddDeductAdj, 
                    int i12MonthResidualAdj, 
                    int i24MonthResidualAdj, 
                    int i30MonthResidualAdj, 
                    int i36MonthResidualAdj, 
                    int i42MonthResidualAdj, 
                    int i48MonthResidualAdj, 
                    int i60MonthResidualAdj, 
                    int i72MonthResidualAdj) {
            this.applyCanadianAdjustments2Async(ds, sFrequencyCode, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, i12MonthResidualAdj, i24MonthResidualAdj, i30MonthResidualAdj, i36MonthResidualAdj, i42MonthResidualAdj, i48MonthResidualAdj, i60MonthResidualAdj, i72MonthResidualAdj, null);
        }
        
        /// <remarks/>
        public void applyCanadianAdjustments2Async(
                    System.Data.DataSet ds, 
                    string sFrequencyCode, 
                    int iMileage, 
                    string sState, 
                    int iExtraCleanAddDeductAdj, 
                    int iCleanAddDeductAdj, 
                    int iAverageAddDeductAdj, 
                    int iRoughAddDeductAdj, 
                    int i12MonthResidualAdj, 
                    int i24MonthResidualAdj, 
                    int i30MonthResidualAdj, 
                    int i36MonthResidualAdj, 
                    int i42MonthResidualAdj, 
                    int i48MonthResidualAdj, 
                    int i60MonthResidualAdj, 
                    int i72MonthResidualAdj, 
                    object userState) {
            if ((this.applyCanadianAdjustments2OperationCompleted == null)) {
                this.applyCanadianAdjustments2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnapplyCanadianAdjustments2OperationCompleted);
            }
            this.InvokeAsync("applyCanadianAdjustments2", new object[] {
                        ds,
                        sFrequencyCode,
                        iMileage,
                        sState,
                        iExtraCleanAddDeductAdj,
                        iCleanAddDeductAdj,
                        iAverageAddDeductAdj,
                        iRoughAddDeductAdj,
                        i12MonthResidualAdj,
                        i24MonthResidualAdj,
                        i30MonthResidualAdj,
                        i36MonthResidualAdj,
                        i42MonthResidualAdj,
                        i48MonthResidualAdj,
                        i60MonthResidualAdj,
                        i72MonthResidualAdj}, this.applyCanadianAdjustments2OperationCompleted, userState);
        }
        
        private void OnapplyCanadianAdjustments2OperationCompleted(object arg) {
            if ((this.applyCanadianAdjustments2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.applyCanadianAdjustments2Completed(this, new applyCanadianAdjustments2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/HistoricalValues", RequestElementName="HistoricalValues", RequestNamespace="http://localhost/webservices/UsedCarWS", ResponseElementName="HistoricalValuesResponse", ResponseNamespace="http://localhost/webservices/UsedCarWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("HistoricalValuesResult")]
        public System.Data.DataSet getValues(
                    string sCountryCode, 
                    string sFrequencyCode, 
                    string sYear, 
                    string sMake, 
                    string sModel, 
                    string sSeries, 
                    string sStyle, 
                    int iMileage, 
                    string sState, 
                    int iExtraCleanAddDeductAdj, 
                    int iCleanAddDeductAdj, 
                    int iAverageAddDeductAdj, 
                    int iRoughAddDeductAdj, 
                    bool bFillDrilldown, 
                    bool bReturnMileage, 
                    bool bReturnAddDeducts, 
                    System.DateTime dHistoricalDate) {
            object[] results = this.Invoke("getValues", new object[] {
                        sCountryCode,
                        sFrequencyCode,
                        sYear,
                        sMake,
                        sModel,
                        sSeries,
                        sStyle,
                        iMileage,
                        sState,
                        iExtraCleanAddDeductAdj,
                        iCleanAddDeductAdj,
                        iAverageAddDeductAdj,
                        iRoughAddDeductAdj,
                        bFillDrilldown,
                        bReturnMileage,
                        bReturnAddDeducts,
                        dHistoricalDate});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getValuesAsync(
                    string sCountryCode, 
                    string sFrequencyCode, 
                    string sYear, 
                    string sMake, 
                    string sModel, 
                    string sSeries, 
                    string sStyle, 
                    int iMileage, 
                    string sState, 
                    int iExtraCleanAddDeductAdj, 
                    int iCleanAddDeductAdj, 
                    int iAverageAddDeductAdj, 
                    int iRoughAddDeductAdj, 
                    bool bFillDrilldown, 
                    bool bReturnMileage, 
                    bool bReturnAddDeducts, 
                    System.DateTime dHistoricalDate) {
            this.getValuesAsync(sCountryCode, sFrequencyCode, sYear, sMake, sModel, sSeries, sStyle, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, bFillDrilldown, bReturnMileage, bReturnAddDeducts, dHistoricalDate, null);
        }
        
        /// <remarks/>
        public void getValuesAsync(
                    string sCountryCode, 
                    string sFrequencyCode, 
                    string sYear, 
                    string sMake, 
                    string sModel, 
                    string sSeries, 
                    string sStyle, 
                    int iMileage, 
                    string sState, 
                    int iExtraCleanAddDeductAdj, 
                    int iCleanAddDeductAdj, 
                    int iAverageAddDeductAdj, 
                    int iRoughAddDeductAdj, 
                    bool bFillDrilldown, 
                    bool bReturnMileage, 
                    bool bReturnAddDeducts, 
                    System.DateTime dHistoricalDate, 
                    object userState) {
            if ((this.getValuesOperationCompleted == null)) {
                this.getValuesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetValuesOperationCompleted);
            }
            this.InvokeAsync("getValues", new object[] {
                        sCountryCode,
                        sFrequencyCode,
                        sYear,
                        sMake,
                        sModel,
                        sSeries,
                        sStyle,
                        iMileage,
                        sState,
                        iExtraCleanAddDeductAdj,
                        iCleanAddDeductAdj,
                        iAverageAddDeductAdj,
                        iRoughAddDeductAdj,
                        bFillDrilldown,
                        bReturnMileage,
                        bReturnAddDeducts,
                        dHistoricalDate}, this.getValuesOperationCompleted, userState);
        }
        
        private void OngetValuesOperationCompleted(object arg) {
            if ((this.getValuesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getValuesCompleted(this, new getValuesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.WebMethodAttribute(MessageName="getValues1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/HistoricalValuesWithEOT", RequestElementName="HistoricalValuesWithEOT", RequestNamespace="http://localhost/webservices/UsedCarWS", ResponseElementName="HistoricalValuesWithEOTResponse", ResponseNamespace="http://localhost/webservices/UsedCarWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("HistoricalValuesWithEOTResult")]
        public System.Data.DataSet getValues(
                    string sCountryCode, 
                    string sFrequencyCode, 
                    string sYear, 
                    string sMake, 
                    string sModel, 
                    string sSeries, 
                    string sStyle, 
                    int iMileage, 
                    string sState, 
                    int iExtraCleanAddDeductAdj, 
                    int iCleanAddDeductAdj, 
                    int iAverageAddDeductAdj, 
                    int iRoughAddDeductAdj, 
                    bool bFillDrilldown, 
                    bool bReturnMileage, 
                    bool bReturnAddDeducts, 
                    System.DateTime dHistoricalDate, 
                    System.DateTime dMaturityDate, 
                    int iMilesPerYear) {
            object[] results = this.Invoke("getValues1", new object[] {
                        sCountryCode,
                        sFrequencyCode,
                        sYear,
                        sMake,
                        sModel,
                        sSeries,
                        sStyle,
                        iMileage,
                        sState,
                        iExtraCleanAddDeductAdj,
                        iCleanAddDeductAdj,
                        iAverageAddDeductAdj,
                        iRoughAddDeductAdj,
                        bFillDrilldown,
                        bReturnMileage,
                        bReturnAddDeducts,
                        dHistoricalDate,
                        dMaturityDate,
                        iMilesPerYear});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getValues1Async(
                    string sCountryCode, 
                    string sFrequencyCode, 
                    string sYear, 
                    string sMake, 
                    string sModel, 
                    string sSeries, 
                    string sStyle, 
                    int iMileage, 
                    string sState, 
                    int iExtraCleanAddDeductAdj, 
                    int iCleanAddDeductAdj, 
                    int iAverageAddDeductAdj, 
                    int iRoughAddDeductAdj, 
                    bool bFillDrilldown, 
                    bool bReturnMileage, 
                    bool bReturnAddDeducts, 
                    System.DateTime dHistoricalDate, 
                    System.DateTime dMaturityDate, 
                    int iMilesPerYear) {
            this.getValues1Async(sCountryCode, sFrequencyCode, sYear, sMake, sModel, sSeries, sStyle, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, bFillDrilldown, bReturnMileage, bReturnAddDeducts, dHistoricalDate, dMaturityDate, iMilesPerYear, null);
        }
        
        /// <remarks/>
        public void getValues1Async(
                    string sCountryCode, 
                    string sFrequencyCode, 
                    string sYear, 
                    string sMake, 
                    string sModel, 
                    string sSeries, 
                    string sStyle, 
                    int iMileage, 
                    string sState, 
                    int iExtraCleanAddDeductAdj, 
                    int iCleanAddDeductAdj, 
                    int iAverageAddDeductAdj, 
                    int iRoughAddDeductAdj, 
                    bool bFillDrilldown, 
                    bool bReturnMileage, 
                    bool bReturnAddDeducts, 
                    System.DateTime dHistoricalDate, 
                    System.DateTime dMaturityDate, 
                    int iMilesPerYear, 
                    object userState) {
            if ((this.getValues1OperationCompleted == null)) {
                this.getValues1OperationCompleted = new System.Threading.SendOrPostCallback(this.OngetValues1OperationCompleted);
            }
            this.InvokeAsync("getValues1", new object[] {
                        sCountryCode,
                        sFrequencyCode,
                        sYear,
                        sMake,
                        sModel,
                        sSeries,
                        sStyle,
                        iMileage,
                        sState,
                        iExtraCleanAddDeductAdj,
                        iCleanAddDeductAdj,
                        iAverageAddDeductAdj,
                        iRoughAddDeductAdj,
                        bFillDrilldown,
                        bReturnMileage,
                        bReturnAddDeducts,
                        dHistoricalDate,
                        dMaturityDate,
                        iMilesPerYear}, this.getValues1OperationCompleted, userState);
        }
        
        private void OngetValues1OperationCompleted(object arg) {
            if ((this.getValues1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getValues1Completed(this, new getValues1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.WebMethodAttribute(MessageName="getValues2")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/CurrentValues", RequestElementName="CurrentValues", RequestNamespace="http://localhost/webservices/UsedCarWS", ResponseElementName="CurrentValuesResponse", ResponseNamespace="http://localhost/webservices/UsedCarWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("CurrentValuesResult")]
        public System.Data.DataSet getValues(
                    string sCountryCode, 
                    string sFrequencyCode, 
                    string sYear, 
                    string sMake, 
                    string sModel, 
                    string sSeries, 
                    string sStyle, 
                    int iMileage, 
                    string sState, 
                    int iExtraCleanAddDeductAdj, 
                    int iCleanAddDeductAdj, 
                    int iAverageAddDeductAdj, 
                    int iRoughAddDeductAdj, 
                    bool bFillDrilldown, 
                    bool bReturnMileage, 
                    bool bReturnAddDeducts) {
            object[] results = this.Invoke("getValues2", new object[] {
                        sCountryCode,
                        sFrequencyCode,
                        sYear,
                        sMake,
                        sModel,
                        sSeries,
                        sStyle,
                        iMileage,
                        sState,
                        iExtraCleanAddDeductAdj,
                        iCleanAddDeductAdj,
                        iAverageAddDeductAdj,
                        iRoughAddDeductAdj,
                        bFillDrilldown,
                        bReturnMileage,
                        bReturnAddDeducts});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getValues2Async(
                    string sCountryCode, 
                    string sFrequencyCode, 
                    string sYear, 
                    string sMake, 
                    string sModel, 
                    string sSeries, 
                    string sStyle, 
                    int iMileage, 
                    string sState, 
                    int iExtraCleanAddDeductAdj, 
                    int iCleanAddDeductAdj, 
                    int iAverageAddDeductAdj, 
                    int iRoughAddDeductAdj, 
                    bool bFillDrilldown, 
                    bool bReturnMileage, 
                    bool bReturnAddDeducts) {
            this.getValues2Async(sCountryCode, sFrequencyCode, sYear, sMake, sModel, sSeries, sStyle, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, bFillDrilldown, bReturnMileage, bReturnAddDeducts, null);
        }
        
        /// <remarks/>
        public void getValues2Async(
                    string sCountryCode, 
                    string sFrequencyCode, 
                    string sYear, 
                    string sMake, 
                    string sModel, 
                    string sSeries, 
                    string sStyle, 
                    int iMileage, 
                    string sState, 
                    int iExtraCleanAddDeductAdj, 
                    int iCleanAddDeductAdj, 
                    int iAverageAddDeductAdj, 
                    int iRoughAddDeductAdj, 
                    bool bFillDrilldown, 
                    bool bReturnMileage, 
                    bool bReturnAddDeducts, 
                    object userState) {
            if ((this.getValues2OperationCompleted == null)) {
                this.getValues2OperationCompleted = new System.Threading.SendOrPostCallback(this.OngetValues2OperationCompleted);
            }
            this.InvokeAsync("getValues2", new object[] {
                        sCountryCode,
                        sFrequencyCode,
                        sYear,
                        sMake,
                        sModel,
                        sSeries,
                        sStyle,
                        iMileage,
                        sState,
                        iExtraCleanAddDeductAdj,
                        iCleanAddDeductAdj,
                        iAverageAddDeductAdj,
                        iRoughAddDeductAdj,
                        bFillDrilldown,
                        bReturnMileage,
                        bReturnAddDeducts}, this.getValues2OperationCompleted, userState);
        }
        
        private void OngetValues2OperationCompleted(object arg) {
            if ((this.getValues2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getValues2Completed(this, new getValues2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.WebMethodAttribute(MessageName="getValues3")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/CurrentValuesWithEOT", RequestElementName="CurrentValuesWithEOT", RequestNamespace="http://localhost/webservices/UsedCarWS", ResponseElementName="CurrentValuesWithEOTResponse", ResponseNamespace="http://localhost/webservices/UsedCarWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("CurrentValuesWithEOTResult")]
        public System.Data.DataSet getValues(
                    string sCountryCode, 
                    string sFrequencyCode, 
                    string sYear, 
                    string sMake, 
                    string sModel, 
                    string sSeries, 
                    string sStyle, 
                    int iMileage, 
                    string sState, 
                    int iExtraCleanAddDeductAdj, 
                    int iCleanAddDeductAdj, 
                    int iAverageAddDeductAdj, 
                    int iRoughAddDeductAdj, 
                    bool bFillDrilldown, 
                    bool bReturnMileage, 
                    bool bReturnAddDeducts, 
                    System.DateTime MaturityDate, 
                    int iMilesPerYear) {
            object[] results = this.Invoke("getValues3", new object[] {
                        sCountryCode,
                        sFrequencyCode,
                        sYear,
                        sMake,
                        sModel,
                        sSeries,
                        sStyle,
                        iMileage,
                        sState,
                        iExtraCleanAddDeductAdj,
                        iCleanAddDeductAdj,
                        iAverageAddDeductAdj,
                        iRoughAddDeductAdj,
                        bFillDrilldown,
                        bReturnMileage,
                        bReturnAddDeducts,
                        MaturityDate,
                        iMilesPerYear});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getValues3Async(
                    string sCountryCode, 
                    string sFrequencyCode, 
                    string sYear, 
                    string sMake, 
                    string sModel, 
                    string sSeries, 
                    string sStyle, 
                    int iMileage, 
                    string sState, 
                    int iExtraCleanAddDeductAdj, 
                    int iCleanAddDeductAdj, 
                    int iAverageAddDeductAdj, 
                    int iRoughAddDeductAdj, 
                    bool bFillDrilldown, 
                    bool bReturnMileage, 
                    bool bReturnAddDeducts, 
                    System.DateTime MaturityDate, 
                    int iMilesPerYear) {
            this.getValues3Async(sCountryCode, sFrequencyCode, sYear, sMake, sModel, sSeries, sStyle, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, bFillDrilldown, bReturnMileage, bReturnAddDeducts, MaturityDate, iMilesPerYear, null);
        }
        
        /// <remarks/>
        public void getValues3Async(
                    string sCountryCode, 
                    string sFrequencyCode, 
                    string sYear, 
                    string sMake, 
                    string sModel, 
                    string sSeries, 
                    string sStyle, 
                    int iMileage, 
                    string sState, 
                    int iExtraCleanAddDeductAdj, 
                    int iCleanAddDeductAdj, 
                    int iAverageAddDeductAdj, 
                    int iRoughAddDeductAdj, 
                    bool bFillDrilldown, 
                    bool bReturnMileage, 
                    bool bReturnAddDeducts, 
                    System.DateTime MaturityDate, 
                    int iMilesPerYear, 
                    object userState) {
            if ((this.getValues3OperationCompleted == null)) {
                this.getValues3OperationCompleted = new System.Threading.SendOrPostCallback(this.OngetValues3OperationCompleted);
            }
            this.InvokeAsync("getValues3", new object[] {
                        sCountryCode,
                        sFrequencyCode,
                        sYear,
                        sMake,
                        sModel,
                        sSeries,
                        sStyle,
                        iMileage,
                        sState,
                        iExtraCleanAddDeductAdj,
                        iCleanAddDeductAdj,
                        iAverageAddDeductAdj,
                        iRoughAddDeductAdj,
                        bFillDrilldown,
                        bReturnMileage,
                        bReturnAddDeducts,
                        MaturityDate,
                        iMilesPerYear}, this.getValues3OperationCompleted, userState);
        }
        
        private void OngetValues3OperationCompleted(object arg) {
            if ((this.getValues3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getValues3Completed(this, new getValues3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/CurrentVINUVCValues", RequestElementName="CurrentVINUVCValues", RequestNamespace="http://localhost/webservices/UsedCarWS", ResponseElementName="CurrentVINUVCValuesResponse", ResponseNamespace="http://localhost/webservices/UsedCarWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("CurrentVINUVCValuesResult")]
        public System.Data.DataSet getVINValues(string sCountryCode, string sFrequencyCode, string sVIN, string sUVC, int iMileage, string sState, int iExtraCleanAddDeductAdj, int iCleanAddDeductAdj, int iAverageAddDeductAdj, int iRoughAddDeductAdj, bool bFillDrilldown, bool bReturnMileage, bool bReturnAddDeducts) {
            object[] results = this.Invoke("getVINValues", new object[] {
                        sCountryCode,
                        sFrequencyCode,
                        sVIN,
                        sUVC,
                        iMileage,
                        sState,
                        iExtraCleanAddDeductAdj,
                        iCleanAddDeductAdj,
                        iAverageAddDeductAdj,
                        iRoughAddDeductAdj,
                        bFillDrilldown,
                        bReturnMileage,
                        bReturnAddDeducts});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getVINValuesAsync(string sCountryCode, string sFrequencyCode, string sVIN, string sUVC, int iMileage, string sState, int iExtraCleanAddDeductAdj, int iCleanAddDeductAdj, int iAverageAddDeductAdj, int iRoughAddDeductAdj, bool bFillDrilldown, bool bReturnMileage, bool bReturnAddDeducts) {
            this.getVINValuesAsync(sCountryCode, sFrequencyCode, sVIN, sUVC, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, bFillDrilldown, bReturnMileage, bReturnAddDeducts, null);
        }
        
        /// <remarks/>
        public void getVINValuesAsync(string sCountryCode, string sFrequencyCode, string sVIN, string sUVC, int iMileage, string sState, int iExtraCleanAddDeductAdj, int iCleanAddDeductAdj, int iAverageAddDeductAdj, int iRoughAddDeductAdj, bool bFillDrilldown, bool bReturnMileage, bool bReturnAddDeducts, object userState) {
            if ((this.getVINValuesOperationCompleted == null)) {
                this.getVINValuesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetVINValuesOperationCompleted);
            }
            this.InvokeAsync("getVINValues", new object[] {
                        sCountryCode,
                        sFrequencyCode,
                        sVIN,
                        sUVC,
                        iMileage,
                        sState,
                        iExtraCleanAddDeductAdj,
                        iCleanAddDeductAdj,
                        iAverageAddDeductAdj,
                        iRoughAddDeductAdj,
                        bFillDrilldown,
                        bReturnMileage,
                        bReturnAddDeducts}, this.getVINValuesOperationCompleted, userState);
        }
        
        private void OngetVINValuesOperationCompleted(object arg) {
            if ((this.getVINValuesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getVINValuesCompleted(this, new getVINValuesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.WebMethodAttribute(MessageName="getVINValues1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/CurrentVINUVCValuesWithEndOfTerm", RequestElementName="CurrentVINUVCValuesWithEndOfTerm", RequestNamespace="http://localhost/webservices/UsedCarWS", ResponseElementName="CurrentVINUVCValuesWithEndOfTermResponse", ResponseNamespace="http://localhost/webservices/UsedCarWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("CurrentVINUVCValuesWithEndOfTermResult")]
        public System.Data.DataSet getVINValues(string sCountryCode, string sFrequencyCode, string sVIN, string sUVC, int iMileage, string sState, int iExtraCleanAddDeductAdj, int iCleanAddDeductAdj, int iAverageAddDeductAdj, int iRoughAddDeductAdj, bool bFillDrilldown, bool bReturnMileage, bool bReturnAddDeducts, System.DateTime MaturityDate, int iMilesPerYear) {
            object[] results = this.Invoke("getVINValues1", new object[] {
                        sCountryCode,
                        sFrequencyCode,
                        sVIN,
                        sUVC,
                        iMileage,
                        sState,
                        iExtraCleanAddDeductAdj,
                        iCleanAddDeductAdj,
                        iAverageAddDeductAdj,
                        iRoughAddDeductAdj,
                        bFillDrilldown,
                        bReturnMileage,
                        bReturnAddDeducts,
                        MaturityDate,
                        iMilesPerYear});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getVINValues1Async(string sCountryCode, string sFrequencyCode, string sVIN, string sUVC, int iMileage, string sState, int iExtraCleanAddDeductAdj, int iCleanAddDeductAdj, int iAverageAddDeductAdj, int iRoughAddDeductAdj, bool bFillDrilldown, bool bReturnMileage, bool bReturnAddDeducts, System.DateTime MaturityDate, int iMilesPerYear) {
            this.getVINValues1Async(sCountryCode, sFrequencyCode, sVIN, sUVC, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, bFillDrilldown, bReturnMileage, bReturnAddDeducts, MaturityDate, iMilesPerYear, null);
        }
        
        /// <remarks/>
        public void getVINValues1Async(
                    string sCountryCode, 
                    string sFrequencyCode, 
                    string sVIN, 
                    string sUVC, 
                    int iMileage, 
                    string sState, 
                    int iExtraCleanAddDeductAdj, 
                    int iCleanAddDeductAdj, 
                    int iAverageAddDeductAdj, 
                    int iRoughAddDeductAdj, 
                    bool bFillDrilldown, 
                    bool bReturnMileage, 
                    bool bReturnAddDeducts, 
                    System.DateTime MaturityDate, 
                    int iMilesPerYear, 
                    object userState) {
            if ((this.getVINValues1OperationCompleted == null)) {
                this.getVINValues1OperationCompleted = new System.Threading.SendOrPostCallback(this.OngetVINValues1OperationCompleted);
            }
            this.InvokeAsync("getVINValues1", new object[] {
                        sCountryCode,
                        sFrequencyCode,
                        sVIN,
                        sUVC,
                        iMileage,
                        sState,
                        iExtraCleanAddDeductAdj,
                        iCleanAddDeductAdj,
                        iAverageAddDeductAdj,
                        iRoughAddDeductAdj,
                        bFillDrilldown,
                        bReturnMileage,
                        bReturnAddDeducts,
                        MaturityDate,
                        iMilesPerYear}, this.getVINValues1OperationCompleted, userState);
        }
        
        private void OngetVINValues1OperationCompleted(object arg) {
            if ((this.getVINValues1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getVINValues1Completed(this, new getVINValues1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.WebMethodAttribute(MessageName="getVINValues2")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/HistoricalVINValues", RequestElementName="HistoricalVINValues", RequestNamespace="http://localhost/webservices/UsedCarWS", ResponseElementName="HistoricalVINValuesResponse", ResponseNamespace="http://localhost/webservices/UsedCarWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("HistoricalVINValuesResult")]
        public System.Data.DataSet getVINValues(string sCountryCode, string sFrequencyCode, string sVIN, int iMileage, string sState, int iExtraCleanAddDeductAdj, int iCleanAddDeductAdj, int iAverageAddDeductAdj, int iRoughAddDeductAdj, bool bFillDrilldown, bool bReturnMileage, bool bReturnAddDeducts, System.DateTime dHistoricalDate) {
            object[] results = this.Invoke("getVINValues2", new object[] {
                        sCountryCode,
                        sFrequencyCode,
                        sVIN,
                        iMileage,
                        sState,
                        iExtraCleanAddDeductAdj,
                        iCleanAddDeductAdj,
                        iAverageAddDeductAdj,
                        iRoughAddDeductAdj,
                        bFillDrilldown,
                        bReturnMileage,
                        bReturnAddDeducts,
                        dHistoricalDate});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getVINValues2Async(string sCountryCode, string sFrequencyCode, string sVIN, int iMileage, string sState, int iExtraCleanAddDeductAdj, int iCleanAddDeductAdj, int iAverageAddDeductAdj, int iRoughAddDeductAdj, bool bFillDrilldown, bool bReturnMileage, bool bReturnAddDeducts, System.DateTime dHistoricalDate) {
            this.getVINValues2Async(sCountryCode, sFrequencyCode, sVIN, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, bFillDrilldown, bReturnMileage, bReturnAddDeducts, dHistoricalDate, null);
        }
        
        /// <remarks/>
        public void getVINValues2Async(string sCountryCode, string sFrequencyCode, string sVIN, int iMileage, string sState, int iExtraCleanAddDeductAdj, int iCleanAddDeductAdj, int iAverageAddDeductAdj, int iRoughAddDeductAdj, bool bFillDrilldown, bool bReturnMileage, bool bReturnAddDeducts, System.DateTime dHistoricalDate, object userState) {
            if ((this.getVINValues2OperationCompleted == null)) {
                this.getVINValues2OperationCompleted = new System.Threading.SendOrPostCallback(this.OngetVINValues2OperationCompleted);
            }
            this.InvokeAsync("getVINValues2", new object[] {
                        sCountryCode,
                        sFrequencyCode,
                        sVIN,
                        iMileage,
                        sState,
                        iExtraCleanAddDeductAdj,
                        iCleanAddDeductAdj,
                        iAverageAddDeductAdj,
                        iRoughAddDeductAdj,
                        bFillDrilldown,
                        bReturnMileage,
                        bReturnAddDeducts,
                        dHistoricalDate}, this.getVINValues2OperationCompleted, userState);
        }
        
        private void OngetVINValues2OperationCompleted(object arg) {
            if ((this.getVINValues2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getVINValues2Completed(this, new getVINValues2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.WebMethodAttribute(MessageName="getVINValues3")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/HistoricalVINValuesWithEndOfTerm", RequestElementName="HistoricalVINValuesWithEndOfTerm", RequestNamespace="http://localhost/webservices/UsedCarWS", ResponseElementName="HistoricalVINValuesWithEndOfTermResponse", ResponseNamespace="http://localhost/webservices/UsedCarWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("HistoricalVINValuesWithEndOfTermResult")]
        public System.Data.DataSet getVINValues(string sCountryCode, string sFrequencyCode, string sVIN, int iMileage, string sState, int iExtraCleanAddDeductAdj, int iCleanAddDeductAdj, int iAverageAddDeductAdj, int iRoughAddDeductAdj, bool bFillDrilldown, bool bReturnMileage, bool bReturnAddDeducts, System.DateTime dHistoricalDate, System.DateTime dMaturityDate, int iMilesPerYear) {
            object[] results = this.Invoke("getVINValues3", new object[] {
                        sCountryCode,
                        sFrequencyCode,
                        sVIN,
                        iMileage,
                        sState,
                        iExtraCleanAddDeductAdj,
                        iCleanAddDeductAdj,
                        iAverageAddDeductAdj,
                        iRoughAddDeductAdj,
                        bFillDrilldown,
                        bReturnMileage,
                        bReturnAddDeducts,
                        dHistoricalDate,
                        dMaturityDate,
                        iMilesPerYear});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getVINValues3Async(string sCountryCode, string sFrequencyCode, string sVIN, int iMileage, string sState, int iExtraCleanAddDeductAdj, int iCleanAddDeductAdj, int iAverageAddDeductAdj, int iRoughAddDeductAdj, bool bFillDrilldown, bool bReturnMileage, bool bReturnAddDeducts, System.DateTime dHistoricalDate, System.DateTime dMaturityDate, int iMilesPerYear) {
            this.getVINValues3Async(sCountryCode, sFrequencyCode, sVIN, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, bFillDrilldown, bReturnMileage, bReturnAddDeducts, dHistoricalDate, dMaturityDate, iMilesPerYear, null);
        }
        
        /// <remarks/>
        public void getVINValues3Async(
                    string sCountryCode, 
                    string sFrequencyCode, 
                    string sVIN, 
                    int iMileage, 
                    string sState, 
                    int iExtraCleanAddDeductAdj, 
                    int iCleanAddDeductAdj, 
                    int iAverageAddDeductAdj, 
                    int iRoughAddDeductAdj, 
                    bool bFillDrilldown, 
                    bool bReturnMileage, 
                    bool bReturnAddDeducts, 
                    System.DateTime dHistoricalDate, 
                    System.DateTime dMaturityDate, 
                    int iMilesPerYear, 
                    object userState) {
            if ((this.getVINValues3OperationCompleted == null)) {
                this.getVINValues3OperationCompleted = new System.Threading.SendOrPostCallback(this.OngetVINValues3OperationCompleted);
            }
            this.InvokeAsync("getVINValues3", new object[] {
                        sCountryCode,
                        sFrequencyCode,
                        sVIN,
                        iMileage,
                        sState,
                        iExtraCleanAddDeductAdj,
                        iCleanAddDeductAdj,
                        iAverageAddDeductAdj,
                        iRoughAddDeductAdj,
                        bFillDrilldown,
                        bReturnMileage,
                        bReturnAddDeducts,
                        dHistoricalDate,
                        dMaturityDate,
                        iMilesPerYear}, this.getVINValues3OperationCompleted, userState);
        }
        
        private void OngetVINValues3OperationCompleted(object arg) {
            if ((this.getVINValues3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getVINValues3Completed(this, new getVINValues3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.WebMethodAttribute(MessageName="getVINValues4")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/HistoricalVINUVCValues", RequestElementName="HistoricalVINUVCValues", RequestNamespace="http://localhost/webservices/UsedCarWS", ResponseElementName="HistoricalVINUVCValuesResponse", ResponseNamespace="http://localhost/webservices/UsedCarWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("HistoricalVINUVCValuesResult")]
        public System.Data.DataSet getVINValues(string sCountryCode, string sFrequencyCode, string sVIN, string sUVC, int iMileage, string sState, int iExtraCleanAddDeductAdj, int iCleanAddDeductAdj, int iAverageAddDeductAdj, int iRoughAddDeductAdj, bool bFillDrilldown, bool bReturnMileage, bool bReturnAddDeducts, System.DateTime dHistoricalDate) {
            object[] results = this.Invoke("getVINValues4", new object[] {
                        sCountryCode,
                        sFrequencyCode,
                        sVIN,
                        sUVC,
                        iMileage,
                        sState,
                        iExtraCleanAddDeductAdj,
                        iCleanAddDeductAdj,
                        iAverageAddDeductAdj,
                        iRoughAddDeductAdj,
                        bFillDrilldown,
                        bReturnMileage,
                        bReturnAddDeducts,
                        dHistoricalDate});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getVINValues4Async(string sCountryCode, string sFrequencyCode, string sVIN, string sUVC, int iMileage, string sState, int iExtraCleanAddDeductAdj, int iCleanAddDeductAdj, int iAverageAddDeductAdj, int iRoughAddDeductAdj, bool bFillDrilldown, bool bReturnMileage, bool bReturnAddDeducts, System.DateTime dHistoricalDate) {
            this.getVINValues4Async(sCountryCode, sFrequencyCode, sVIN, sUVC, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, bFillDrilldown, bReturnMileage, bReturnAddDeducts, dHistoricalDate, null);
        }
        
        /// <remarks/>
        public void getVINValues4Async(string sCountryCode, string sFrequencyCode, string sVIN, string sUVC, int iMileage, string sState, int iExtraCleanAddDeductAdj, int iCleanAddDeductAdj, int iAverageAddDeductAdj, int iRoughAddDeductAdj, bool bFillDrilldown, bool bReturnMileage, bool bReturnAddDeducts, System.DateTime dHistoricalDate, object userState) {
            if ((this.getVINValues4OperationCompleted == null)) {
                this.getVINValues4OperationCompleted = new System.Threading.SendOrPostCallback(this.OngetVINValues4OperationCompleted);
            }
            this.InvokeAsync("getVINValues4", new object[] {
                        sCountryCode,
                        sFrequencyCode,
                        sVIN,
                        sUVC,
                        iMileage,
                        sState,
                        iExtraCleanAddDeductAdj,
                        iCleanAddDeductAdj,
                        iAverageAddDeductAdj,
                        iRoughAddDeductAdj,
                        bFillDrilldown,
                        bReturnMileage,
                        bReturnAddDeducts,
                        dHistoricalDate}, this.getVINValues4OperationCompleted, userState);
        }
        
        private void OngetVINValues4OperationCompleted(object arg) {
            if ((this.getVINValues4Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getVINValues4Completed(this, new getVINValues4CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.WebMethodAttribute(MessageName="getVINValues5")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/HistoricalVINUVCValuesWithEndOfTerm", RequestElementName="HistoricalVINUVCValuesWithEndOfTerm", RequestNamespace="http://localhost/webservices/UsedCarWS", ResponseElementName="HistoricalVINUVCValuesWithEndOfTermResponse", ResponseNamespace="http://localhost/webservices/UsedCarWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("HistoricalVINUVCValuesWithEndOfTermResult")]
        public System.Data.DataSet getVINValues(
                    string sCountryCode, 
                    string sFrequencyCode, 
                    string sVIN, 
                    string sUVC, 
                    int iMileage, 
                    string sState, 
                    int iExtraCleanAddDeductAdj, 
                    int iCleanAddDeductAdj, 
                    int iAverageAddDeductAdj, 
                    int iRoughAddDeductAdj, 
                    bool bFillDrilldown, 
                    bool bReturnMileage, 
                    bool bReturnAddDeducts, 
                    System.DateTime dHistoricalDate, 
                    System.DateTime dMaturityDate, 
                    int iMilesPerYear) {
            object[] results = this.Invoke("getVINValues5", new object[] {
                        sCountryCode,
                        sFrequencyCode,
                        sVIN,
                        sUVC,
                        iMileage,
                        sState,
                        iExtraCleanAddDeductAdj,
                        iCleanAddDeductAdj,
                        iAverageAddDeductAdj,
                        iRoughAddDeductAdj,
                        bFillDrilldown,
                        bReturnMileage,
                        bReturnAddDeducts,
                        dHistoricalDate,
                        dMaturityDate,
                        iMilesPerYear});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getVINValues5Async(
                    string sCountryCode, 
                    string sFrequencyCode, 
                    string sVIN, 
                    string sUVC, 
                    int iMileage, 
                    string sState, 
                    int iExtraCleanAddDeductAdj, 
                    int iCleanAddDeductAdj, 
                    int iAverageAddDeductAdj, 
                    int iRoughAddDeductAdj, 
                    bool bFillDrilldown, 
                    bool bReturnMileage, 
                    bool bReturnAddDeducts, 
                    System.DateTime dHistoricalDate, 
                    System.DateTime dMaturityDate, 
                    int iMilesPerYear) {
            this.getVINValues5Async(sCountryCode, sFrequencyCode, sVIN, sUVC, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, bFillDrilldown, bReturnMileage, bReturnAddDeducts, dHistoricalDate, dMaturityDate, iMilesPerYear, null);
        }
        
        /// <remarks/>
        public void getVINValues5Async(
                    string sCountryCode, 
                    string sFrequencyCode, 
                    string sVIN, 
                    string sUVC, 
                    int iMileage, 
                    string sState, 
                    int iExtraCleanAddDeductAdj, 
                    int iCleanAddDeductAdj, 
                    int iAverageAddDeductAdj, 
                    int iRoughAddDeductAdj, 
                    bool bFillDrilldown, 
                    bool bReturnMileage, 
                    bool bReturnAddDeducts, 
                    System.DateTime dHistoricalDate, 
                    System.DateTime dMaturityDate, 
                    int iMilesPerYear, 
                    object userState) {
            if ((this.getVINValues5OperationCompleted == null)) {
                this.getVINValues5OperationCompleted = new System.Threading.SendOrPostCallback(this.OngetVINValues5OperationCompleted);
            }
            this.InvokeAsync("getVINValues5", new object[] {
                        sCountryCode,
                        sFrequencyCode,
                        sVIN,
                        sUVC,
                        iMileage,
                        sState,
                        iExtraCleanAddDeductAdj,
                        iCleanAddDeductAdj,
                        iAverageAddDeductAdj,
                        iRoughAddDeductAdj,
                        bFillDrilldown,
                        bReturnMileage,
                        bReturnAddDeducts,
                        dHistoricalDate,
                        dMaturityDate,
                        iMilesPerYear}, this.getVINValues5OperationCompleted, userState);
        }
        
        private void OngetVINValues5OperationCompleted(object arg) {
            if ((this.getVINValues5Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getVINValues5Completed(this, new getVINValues5CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.WebMethodAttribute(MessageName="getVINValues6")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/CurrentVINValues", RequestElementName="CurrentVINValues", RequestNamespace="http://localhost/webservices/UsedCarWS", ResponseElementName="CurrentVINValuesResponse", ResponseNamespace="http://localhost/webservices/UsedCarWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("CurrentVINValuesResult")]
        public System.Data.DataSet getVINValues(string sCountryCode, string sFrequencyCode, string sVIN, int iMileage, string sState, int iExtraCleanAddDeductAdj, int iCleanAddDeductAdj, int iAverageAddDeductAdj, int iRoughAddDeductAdj, bool bFillDrilldown, bool bReturnMileage, bool bReturnAddDeducts) {
            object[] results = this.Invoke("getVINValues6", new object[] {
                        sCountryCode,
                        sFrequencyCode,
                        sVIN,
                        iMileage,
                        sState,
                        iExtraCleanAddDeductAdj,
                        iCleanAddDeductAdj,
                        iAverageAddDeductAdj,
                        iRoughAddDeductAdj,
                        bFillDrilldown,
                        bReturnMileage,
                        bReturnAddDeducts});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getVINValues6Async(string sCountryCode, string sFrequencyCode, string sVIN, int iMileage, string sState, int iExtraCleanAddDeductAdj, int iCleanAddDeductAdj, int iAverageAddDeductAdj, int iRoughAddDeductAdj, bool bFillDrilldown, bool bReturnMileage, bool bReturnAddDeducts) {
            this.getVINValues6Async(sCountryCode, sFrequencyCode, sVIN, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, bFillDrilldown, bReturnMileage, bReturnAddDeducts, null);
        }
        
        /// <remarks/>
        public void getVINValues6Async(string sCountryCode, string sFrequencyCode, string sVIN, int iMileage, string sState, int iExtraCleanAddDeductAdj, int iCleanAddDeductAdj, int iAverageAddDeductAdj, int iRoughAddDeductAdj, bool bFillDrilldown, bool bReturnMileage, bool bReturnAddDeducts, object userState) {
            if ((this.getVINValues6OperationCompleted == null)) {
                this.getVINValues6OperationCompleted = new System.Threading.SendOrPostCallback(this.OngetVINValues6OperationCompleted);
            }
            this.InvokeAsync("getVINValues6", new object[] {
                        sCountryCode,
                        sFrequencyCode,
                        sVIN,
                        iMileage,
                        sState,
                        iExtraCleanAddDeductAdj,
                        iCleanAddDeductAdj,
                        iAverageAddDeductAdj,
                        iRoughAddDeductAdj,
                        bFillDrilldown,
                        bReturnMileage,
                        bReturnAddDeducts}, this.getVINValues6OperationCompleted, userState);
        }
        
        private void OngetVINValues6OperationCompleted(object arg) {
            if ((this.getVINValues6Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getVINValues6Completed(this, new getVINValues6CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.WebMethodAttribute(MessageName="getVINValues7")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/CurrentVINValuesWithEndOfTerm", RequestElementName="CurrentVINValuesWithEndOfTerm", RequestNamespace="http://localhost/webservices/UsedCarWS", ResponseElementName="CurrentVINValuesWithEndOfTermResponse", ResponseNamespace="http://localhost/webservices/UsedCarWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("CurrentVINValuesWithEndOfTermResult")]
        public System.Data.DataSet getVINValues(string sCountryCode, string sFrequencyCode, string sVIN, int iMileage, string sState, int iExtraCleanAddDeductAdj, int iCleanAddDeductAdj, int iAverageAddDeductAdj, int iRoughAddDeductAdj, bool bFillDrilldown, bool bReturnMileage, bool bReturnAddDeducts, System.DateTime MaturityDate, int iMilesPerYear) {
            object[] results = this.Invoke("getVINValues7", new object[] {
                        sCountryCode,
                        sFrequencyCode,
                        sVIN,
                        iMileage,
                        sState,
                        iExtraCleanAddDeductAdj,
                        iCleanAddDeductAdj,
                        iAverageAddDeductAdj,
                        iRoughAddDeductAdj,
                        bFillDrilldown,
                        bReturnMileage,
                        bReturnAddDeducts,
                        MaturityDate,
                        iMilesPerYear});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getVINValues7Async(string sCountryCode, string sFrequencyCode, string sVIN, int iMileage, string sState, int iExtraCleanAddDeductAdj, int iCleanAddDeductAdj, int iAverageAddDeductAdj, int iRoughAddDeductAdj, bool bFillDrilldown, bool bReturnMileage, bool bReturnAddDeducts, System.DateTime MaturityDate, int iMilesPerYear) {
            this.getVINValues7Async(sCountryCode, sFrequencyCode, sVIN, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, bFillDrilldown, bReturnMileage, bReturnAddDeducts, MaturityDate, iMilesPerYear, null);
        }
        
        /// <remarks/>
        public void getVINValues7Async(string sCountryCode, string sFrequencyCode, string sVIN, int iMileage, string sState, int iExtraCleanAddDeductAdj, int iCleanAddDeductAdj, int iAverageAddDeductAdj, int iRoughAddDeductAdj, bool bFillDrilldown, bool bReturnMileage, bool bReturnAddDeducts, System.DateTime MaturityDate, int iMilesPerYear, object userState) {
            if ((this.getVINValues7OperationCompleted == null)) {
                this.getVINValues7OperationCompleted = new System.Threading.SendOrPostCallback(this.OngetVINValues7OperationCompleted);
            }
            this.InvokeAsync("getVINValues7", new object[] {
                        sCountryCode,
                        sFrequencyCode,
                        sVIN,
                        iMileage,
                        sState,
                        iExtraCleanAddDeductAdj,
                        iCleanAddDeductAdj,
                        iAverageAddDeductAdj,
                        iRoughAddDeductAdj,
                        bFillDrilldown,
                        bReturnMileage,
                        bReturnAddDeducts,
                        MaturityDate,
                        iMilesPerYear}, this.getVINValues7OperationCompleted, userState);
        }
        
        private void OngetVINValues7OperationCompleted(object arg) {
            if ((this.getVINValues7Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getVINValues7Completed(this, new getVINValues7CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/HistoricalMileage", RequestElementName="HistoricalMileage", RequestNamespace="http://localhost/webservices/UsedCarWS", ResponseElementName="HistoricalMileageResponse", ResponseNamespace="http://localhost/webservices/UsedCarWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("HistoricalMileageResult")]
        public System.Data.DataSet getMileage(string sFrequencyCode, string sVINYear, string sMileageCategory, int iMileage, System.DateTime dHistoricalDate) {
            object[] results = this.Invoke("getMileage", new object[] {
                        sFrequencyCode,
                        sVINYear,
                        sMileageCategory,
                        iMileage,
                        dHistoricalDate});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getMileageAsync(string sFrequencyCode, string sVINYear, string sMileageCategory, int iMileage, System.DateTime dHistoricalDate) {
            this.getMileageAsync(sFrequencyCode, sVINYear, sMileageCategory, iMileage, dHistoricalDate, null);
        }
        
        /// <remarks/>
        public void getMileageAsync(string sFrequencyCode, string sVINYear, string sMileageCategory, int iMileage, System.DateTime dHistoricalDate, object userState) {
            if ((this.getMileageOperationCompleted == null)) {
                this.getMileageOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMileageOperationCompleted);
            }
            this.InvokeAsync("getMileage", new object[] {
                        sFrequencyCode,
                        sVINYear,
                        sMileageCategory,
                        iMileage,
                        dHistoricalDate}, this.getMileageOperationCompleted, userState);
        }
        
        private void OngetMileageOperationCompleted(object arg) {
            if ((this.getMileageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMileageCompleted(this, new getMileageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/HistoricalMileageByFullYear", RequestElementName="HistoricalMileageByFullYear", RequestNamespace="http://localhost/webservices/UsedCarWS", ResponseElementName="HistoricalMileageByFullYearResponse", ResponseNamespace="http://localhost/webservices/UsedCarWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("HistoricalMileageByFullYearResult")]
        public System.Data.DataSet getMileageByFullYear(string sFrequencyCode, string sYear, string sMileageCategory, int iMileage, System.DateTime dHistoricalDate) {
            object[] results = this.Invoke("getMileageByFullYear", new object[] {
                        sFrequencyCode,
                        sYear,
                        sMileageCategory,
                        iMileage,
                        dHistoricalDate});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getMileageByFullYearAsync(string sFrequencyCode, string sYear, string sMileageCategory, int iMileage, System.DateTime dHistoricalDate) {
            this.getMileageByFullYearAsync(sFrequencyCode, sYear, sMileageCategory, iMileage, dHistoricalDate, null);
        }
        
        /// <remarks/>
        public void getMileageByFullYearAsync(string sFrequencyCode, string sYear, string sMileageCategory, int iMileage, System.DateTime dHistoricalDate, object userState) {
            if ((this.getMileageByFullYearOperationCompleted == null)) {
                this.getMileageByFullYearOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMileageByFullYearOperationCompleted);
            }
            this.InvokeAsync("getMileageByFullYear", new object[] {
                        sFrequencyCode,
                        sYear,
                        sMileageCategory,
                        iMileage,
                        dHistoricalDate}, this.getMileageByFullYearOperationCompleted, userState);
        }
        
        private void OngetMileageByFullYearOperationCompleted(object arg) {
            if ((this.getMileageByFullYearCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMileageByFullYearCompleted(this, new getMileageByFullYearCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/HistoricalCanadianMileage", RequestElementName="HistoricalCanadianMileage", RequestNamespace="http://localhost/webservices/UsedCarWS", ResponseElementName="HistoricalCanadianMileageResponse", ResponseNamespace="http://localhost/webservices/UsedCarWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("HistoricalCanadianMileageResult")]
        public System.Data.DataSet getCanadianMileage(string sFrequencyCode, string sVINYear, string sMileageCategory, int iMileage, System.DateTime dHistoricalDate) {
            object[] results = this.Invoke("getCanadianMileage", new object[] {
                        sFrequencyCode,
                        sVINYear,
                        sMileageCategory,
                        iMileage,
                        dHistoricalDate});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getCanadianMileageAsync(string sFrequencyCode, string sVINYear, string sMileageCategory, int iMileage, System.DateTime dHistoricalDate) {
            this.getCanadianMileageAsync(sFrequencyCode, sVINYear, sMileageCategory, iMileage, dHistoricalDate, null);
        }
        
        /// <remarks/>
        public void getCanadianMileageAsync(string sFrequencyCode, string sVINYear, string sMileageCategory, int iMileage, System.DateTime dHistoricalDate, object userState) {
            if ((this.getCanadianMileageOperationCompleted == null)) {
                this.getCanadianMileageOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCanadianMileageOperationCompleted);
            }
            this.InvokeAsync("getCanadianMileage", new object[] {
                        sFrequencyCode,
                        sVINYear,
                        sMileageCategory,
                        iMileage,
                        dHistoricalDate}, this.getCanadianMileageOperationCompleted, userState);
        }
        
        private void OngetCanadianMileageOperationCompleted(object arg) {
            if ((this.getCanadianMileageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCanadianMileageCompleted(this, new getCanadianMileageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/HistoricalCanadianMileageByFullYear", RequestElementName="HistoricalCanadianMileageByFullYear", RequestNamespace="http://localhost/webservices/UsedCarWS", ResponseElementName="HistoricalCanadianMileageByFullYearResponse", ResponseNamespace="http://localhost/webservices/UsedCarWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("HistoricalCanadianMileageByFullYearResult")]
        public System.Data.DataSet getCanadianMileageByFullYear(string sFrequencyCode, string sYear, string sMileageCategory, int iMileage, System.DateTime dHistoricalDate) {
            object[] results = this.Invoke("getCanadianMileageByFullYear", new object[] {
                        sFrequencyCode,
                        sYear,
                        sMileageCategory,
                        iMileage,
                        dHistoricalDate});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getCanadianMileageByFullYearAsync(string sFrequencyCode, string sYear, string sMileageCategory, int iMileage, System.DateTime dHistoricalDate) {
            this.getCanadianMileageByFullYearAsync(sFrequencyCode, sYear, sMileageCategory, iMileage, dHistoricalDate, null);
        }
        
        /// <remarks/>
        public void getCanadianMileageByFullYearAsync(string sFrequencyCode, string sYear, string sMileageCategory, int iMileage, System.DateTime dHistoricalDate, object userState) {
            if ((this.getCanadianMileageByFullYearOperationCompleted == null)) {
                this.getCanadianMileageByFullYearOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCanadianMileageByFullYearOperationCompleted);
            }
            this.InvokeAsync("getCanadianMileageByFullYear", new object[] {
                        sFrequencyCode,
                        sYear,
                        sMileageCategory,
                        iMileage,
                        dHistoricalDate}, this.getCanadianMileageByFullYearOperationCompleted, userState);
        }
        
        private void OngetCanadianMileageByFullYearOperationCompleted(object arg) {
            if ((this.getCanadianMileageByFullYearCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCanadianMileageByFullYearCompleted(this, new getCanadianMileageByFullYearCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.WebMethodAttribute(MessageName="getCanadianMileage1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/CurrentCanadianMileage", RequestElementName="CurrentCanadianMileage", RequestNamespace="http://localhost/webservices/UsedCarWS", ResponseElementName="CurrentCanadianMileageResponse", ResponseNamespace="http://localhost/webservices/UsedCarWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("CurrentCanadianMileageResult")]
        public System.Data.DataSet getCanadianMileage(string sFrequencyCode, string sVINYear, string sMileageCategory, int iMileage) {
            object[] results = this.Invoke("getCanadianMileage1", new object[] {
                        sFrequencyCode,
                        sVINYear,
                        sMileageCategory,
                        iMileage});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getCanadianMileage1Async(string sFrequencyCode, string sVINYear, string sMileageCategory, int iMileage) {
            this.getCanadianMileage1Async(sFrequencyCode, sVINYear, sMileageCategory, iMileage, null);
        }
        
        /// <remarks/>
        public void getCanadianMileage1Async(string sFrequencyCode, string sVINYear, string sMileageCategory, int iMileage, object userState) {
            if ((this.getCanadianMileage1OperationCompleted == null)) {
                this.getCanadianMileage1OperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCanadianMileage1OperationCompleted);
            }
            this.InvokeAsync("getCanadianMileage1", new object[] {
                        sFrequencyCode,
                        sVINYear,
                        sMileageCategory,
                        iMileage}, this.getCanadianMileage1OperationCompleted, userState);
        }
        
        private void OngetCanadianMileage1OperationCompleted(object arg) {
            if ((this.getCanadianMileage1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCanadianMileage1Completed(this, new getCanadianMileage1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.WebMethodAttribute(MessageName="getCanadianMileageByFullYear1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/CurrentCanadianMileageByFullYear", RequestElementName="CurrentCanadianMileageByFullYear", RequestNamespace="http://localhost/webservices/UsedCarWS", ResponseElementName="CurrentCanadianMileageByFullYearResponse", ResponseNamespace="http://localhost/webservices/UsedCarWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("CurrentCanadianMileageByFullYearResult")]
        public System.Data.DataSet getCanadianMileageByFullYear(string sFrequencyCode, string sYear, string sMileageCategory, int iMileage) {
            object[] results = this.Invoke("getCanadianMileageByFullYear1", new object[] {
                        sFrequencyCode,
                        sYear,
                        sMileageCategory,
                        iMileage});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getCanadianMileageByFullYear1Async(string sFrequencyCode, string sYear, string sMileageCategory, int iMileage) {
            this.getCanadianMileageByFullYear1Async(sFrequencyCode, sYear, sMileageCategory, iMileage, null);
        }
        
        /// <remarks/>
        public void getCanadianMileageByFullYear1Async(string sFrequencyCode, string sYear, string sMileageCategory, int iMileage, object userState) {
            if ((this.getCanadianMileageByFullYear1OperationCompleted == null)) {
                this.getCanadianMileageByFullYear1OperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCanadianMileageByFullYear1OperationCompleted);
            }
            this.InvokeAsync("getCanadianMileageByFullYear1", new object[] {
                        sFrequencyCode,
                        sYear,
                        sMileageCategory,
                        iMileage}, this.getCanadianMileageByFullYear1OperationCompleted, userState);
        }
        
        private void OngetCanadianMileageByFullYear1OperationCompleted(object arg) {
            if ((this.getCanadianMileageByFullYear1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCanadianMileageByFullYear1Completed(this, new getCanadianMileageByFullYear1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.WebMethodAttribute(MessageName="getMileage1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/CurrentMileage", RequestElementName="CurrentMileage", RequestNamespace="http://localhost/webservices/UsedCarWS", ResponseElementName="CurrentMileageResponse", ResponseNamespace="http://localhost/webservices/UsedCarWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("CurrentMileageResult")]
        public System.Data.DataSet getMileage(string sFrequencyCode, string sVINYear, string sMileageCategory, int iMileage) {
            object[] results = this.Invoke("getMileage1", new object[] {
                        sFrequencyCode,
                        sVINYear,
                        sMileageCategory,
                        iMileage});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getMileage1Async(string sFrequencyCode, string sVINYear, string sMileageCategory, int iMileage) {
            this.getMileage1Async(sFrequencyCode, sVINYear, sMileageCategory, iMileage, null);
        }
        
        /// <remarks/>
        public void getMileage1Async(string sFrequencyCode, string sVINYear, string sMileageCategory, int iMileage, object userState) {
            if ((this.getMileage1OperationCompleted == null)) {
                this.getMileage1OperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMileage1OperationCompleted);
            }
            this.InvokeAsync("getMileage1", new object[] {
                        sFrequencyCode,
                        sVINYear,
                        sMileageCategory,
                        iMileage}, this.getMileage1OperationCompleted, userState);
        }
        
        private void OngetMileage1OperationCompleted(object arg) {
            if ((this.getMileage1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMileage1Completed(this, new getMileage1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.WebMethodAttribute(MessageName="getMileageByFullYear1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/CurrentMileageByFullYear", RequestElementName="CurrentMileageByFullYear", RequestNamespace="http://localhost/webservices/UsedCarWS", ResponseElementName="CurrentMileageByFullYearResponse", ResponseNamespace="http://localhost/webservices/UsedCarWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("CurrentMileageByFullYearResult")]
        public System.Data.DataSet getMileageByFullYear(string sFrequencyCode, string sYear, string sMileageCategory, int iMileage) {
            object[] results = this.Invoke("getMileageByFullYear1", new object[] {
                        sFrequencyCode,
                        sYear,
                        sMileageCategory,
                        iMileage});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getMileageByFullYear1Async(string sFrequencyCode, string sYear, string sMileageCategory, int iMileage) {
            this.getMileageByFullYear1Async(sFrequencyCode, sYear, sMileageCategory, iMileage, null);
        }
        
        /// <remarks/>
        public void getMileageByFullYear1Async(string sFrequencyCode, string sYear, string sMileageCategory, int iMileage, object userState) {
            if ((this.getMileageByFullYear1OperationCompleted == null)) {
                this.getMileageByFullYear1OperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMileageByFullYear1OperationCompleted);
            }
            this.InvokeAsync("getMileageByFullYear1", new object[] {
                        sFrequencyCode,
                        sYear,
                        sMileageCategory,
                        iMileage}, this.getMileageByFullYear1OperationCompleted, userState);
        }
        
        private void OngetMileageByFullYear1OperationCompleted(object arg) {
            if ((this.getMileageByFullYear1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMileageByFullYear1Completed(this, new getMileageByFullYear1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/HistoricalAddDeducts", RequestElementName="HistoricalAddDeducts", RequestNamespace="http://localhost/webservices/UsedCarWS", ResponseElementName="HistoricalAddDeductsResponse", ResponseNamespace="http://localhost/webservices/UsedCarWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("HistoricalAddDeductsResult")]
        public System.Data.DataSet getAddDeducts(string sCountryCode, string sFrequencyCode, string sVINYear, string sGroupNumber, string sVIN, System.DateTime dHistoricalDate) {
            object[] results = this.Invoke("getAddDeducts", new object[] {
                        sCountryCode,
                        sFrequencyCode,
                        sVINYear,
                        sGroupNumber,
                        sVIN,
                        dHistoricalDate});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getAddDeductsAsync(string sCountryCode, string sFrequencyCode, string sVINYear, string sGroupNumber, string sVIN, System.DateTime dHistoricalDate) {
            this.getAddDeductsAsync(sCountryCode, sFrequencyCode, sVINYear, sGroupNumber, sVIN, dHistoricalDate, null);
        }
        
        /// <remarks/>
        public void getAddDeductsAsync(string sCountryCode, string sFrequencyCode, string sVINYear, string sGroupNumber, string sVIN, System.DateTime dHistoricalDate, object userState) {
            if ((this.getAddDeductsOperationCompleted == null)) {
                this.getAddDeductsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAddDeductsOperationCompleted);
            }
            this.InvokeAsync("getAddDeducts", new object[] {
                        sCountryCode,
                        sFrequencyCode,
                        sVINYear,
                        sGroupNumber,
                        sVIN,
                        dHistoricalDate}, this.getAddDeductsOperationCompleted, userState);
        }
        
        private void OngetAddDeductsOperationCompleted(object arg) {
            if ((this.getAddDeductsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAddDeductsCompleted(this, new getAddDeductsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/HistoricalAddDeductsByFullYear", RequestElementName="HistoricalAddDeductsByFullYear", RequestNamespace="http://localhost/webservices/UsedCarWS", ResponseElementName="HistoricalAddDeductsByFullYearResponse", ResponseNamespace="http://localhost/webservices/UsedCarWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("HistoricalAddDeductsByFullYearResult")]
        public System.Data.DataSet getAddDeductsByFullYear(string sCountryCode, string sFrequencyCode, string sFullYear, string sGroupNumber, string sVIN, System.DateTime dHistoricalDate) {
            object[] results = this.Invoke("getAddDeductsByFullYear", new object[] {
                        sCountryCode,
                        sFrequencyCode,
                        sFullYear,
                        sGroupNumber,
                        sVIN,
                        dHistoricalDate});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getAddDeductsByFullYearAsync(string sCountryCode, string sFrequencyCode, string sFullYear, string sGroupNumber, string sVIN, System.DateTime dHistoricalDate) {
            this.getAddDeductsByFullYearAsync(sCountryCode, sFrequencyCode, sFullYear, sGroupNumber, sVIN, dHistoricalDate, null);
        }
        
        /// <remarks/>
        public void getAddDeductsByFullYearAsync(string sCountryCode, string sFrequencyCode, string sFullYear, string sGroupNumber, string sVIN, System.DateTime dHistoricalDate, object userState) {
            if ((this.getAddDeductsByFullYearOperationCompleted == null)) {
                this.getAddDeductsByFullYearOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAddDeductsByFullYearOperationCompleted);
            }
            this.InvokeAsync("getAddDeductsByFullYear", new object[] {
                        sCountryCode,
                        sFrequencyCode,
                        sFullYear,
                        sGroupNumber,
                        sVIN,
                        dHistoricalDate}, this.getAddDeductsByFullYearOperationCompleted, userState);
        }
        
        private void OngetAddDeductsByFullYearOperationCompleted(object arg) {
            if ((this.getAddDeductsByFullYearCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAddDeductsByFullYearCompleted(this, new getAddDeductsByFullYearCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.WebMethodAttribute(MessageName="getAddDeducts1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/CurrentAddDeducts", RequestElementName="CurrentAddDeducts", RequestNamespace="http://localhost/webservices/UsedCarWS", ResponseElementName="CurrentAddDeductsResponse", ResponseNamespace="http://localhost/webservices/UsedCarWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("CurrentAddDeductsResult")]
        public System.Data.DataSet getAddDeducts(string sCountryCode, string sFrequencyCode, string sVINYear, string sGroupNumber, string sVIN) {
            object[] results = this.Invoke("getAddDeducts1", new object[] {
                        sCountryCode,
                        sFrequencyCode,
                        sVINYear,
                        sGroupNumber,
                        sVIN});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getAddDeducts1Async(string sCountryCode, string sFrequencyCode, string sVINYear, string sGroupNumber, string sVIN) {
            this.getAddDeducts1Async(sCountryCode, sFrequencyCode, sVINYear, sGroupNumber, sVIN, null);
        }
        
        /// <remarks/>
        public void getAddDeducts1Async(string sCountryCode, string sFrequencyCode, string sVINYear, string sGroupNumber, string sVIN, object userState) {
            if ((this.getAddDeducts1OperationCompleted == null)) {
                this.getAddDeducts1OperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAddDeducts1OperationCompleted);
            }
            this.InvokeAsync("getAddDeducts1", new object[] {
                        sCountryCode,
                        sFrequencyCode,
                        sVINYear,
                        sGroupNumber,
                        sVIN}, this.getAddDeducts1OperationCompleted, userState);
        }
        
        private void OngetAddDeducts1OperationCompleted(object arg) {
            if ((this.getAddDeducts1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAddDeducts1Completed(this, new getAddDeducts1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.WebMethodAttribute(MessageName="getAddDeductsByFullYear1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/CurrentAddDeductsByFullYear", RequestElementName="CurrentAddDeductsByFullYear", RequestNamespace="http://localhost/webservices/UsedCarWS", ResponseElementName="CurrentAddDeductsByFullYearResponse", ResponseNamespace="http://localhost/webservices/UsedCarWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("CurrentAddDeductsByFullYearResult")]
        public System.Data.DataSet getAddDeductsByFullYear(string sCountryCode, string sFrequencyCode, string sFullYear, string sGroupNumber, string sVIN) {
            object[] results = this.Invoke("getAddDeductsByFullYear1", new object[] {
                        sCountryCode,
                        sFrequencyCode,
                        sFullYear,
                        sGroupNumber,
                        sVIN});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getAddDeductsByFullYear1Async(string sCountryCode, string sFrequencyCode, string sFullYear, string sGroupNumber, string sVIN) {
            this.getAddDeductsByFullYear1Async(sCountryCode, sFrequencyCode, sFullYear, sGroupNumber, sVIN, null);
        }
        
        /// <remarks/>
        public void getAddDeductsByFullYear1Async(string sCountryCode, string sFrequencyCode, string sFullYear, string sGroupNumber, string sVIN, object userState) {
            if ((this.getAddDeductsByFullYear1OperationCompleted == null)) {
                this.getAddDeductsByFullYear1OperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAddDeductsByFullYear1OperationCompleted);
            }
            this.InvokeAsync("getAddDeductsByFullYear1", new object[] {
                        sCountryCode,
                        sFrequencyCode,
                        sFullYear,
                        sGroupNumber,
                        sVIN}, this.getAddDeductsByFullYear1OperationCompleted, userState);
        }
        
        private void OngetAddDeductsByFullYear1OperationCompleted(object arg) {
            if ((this.getAddDeductsByFullYear1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAddDeductsByFullYear1Completed(this, new getAddDeductsByFullYear1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/SingleState", RequestElementName="SingleState", RequestNamespace="http://localhost/webservices/UsedCarWS", ResponseElementName="SingleStateResponse", ResponseNamespace="http://localhost/webservices/UsedCarWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("SingleStateResult")]
        public System.Data.DataSet getSingleState(string sState) {
            object[] results = this.Invoke("getSingleState", new object[] {
                        sState});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getSingleStateAsync(string sState) {
            this.getSingleStateAsync(sState, null);
        }
        
        /// <remarks/>
        public void getSingleStateAsync(string sState, object userState) {
            if ((this.getSingleStateOperationCompleted == null)) {
                this.getSingleStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSingleStateOperationCompleted);
            }
            this.InvokeAsync("getSingleState", new object[] {
                        sState}, this.getSingleStateOperationCompleted, userState);
        }
        
        private void OngetSingleStateOperationCompleted(object arg) {
            if ((this.getSingleStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSingleStateCompleted(this, new getSingleStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/AllStates", RequestElementName="AllStates", RequestNamespace="http://localhost/webservices/UsedCarWS", ResponseElementName="AllStatesResponse", ResponseNamespace="http://localhost/webservices/UsedCarWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("AllStatesResult")]
        public System.Data.DataSet getAllStates() {
            object[] results = this.Invoke("getAllStates", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getAllStatesAsync() {
            this.getAllStatesAsync(null);
        }
        
        /// <remarks/>
        public void getAllStatesAsync(object userState) {
            if ((this.getAllStatesOperationCompleted == null)) {
                this.getAllStatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllStatesOperationCompleted);
            }
            this.InvokeAsync("getAllStates", new object[0], this.getAllStatesOperationCompleted, userState);
        }
        
        private void OngetAllStatesOperationCompleted(object arg) {
            if ((this.getAllStatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllStatesCompleted(this, new getAllStatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/SingleProvince", RequestElementName="SingleProvince", RequestNamespace="http://localhost/webservices/UsedCarWS", ResponseElementName="SingleProvinceResponse", ResponseNamespace="http://localhost/webservices/UsedCarWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("SingleProvinceResult")]
        public System.Data.DataSet getSingleProvince(string sFrequencyCode, string sProvince) {
            object[] results = this.Invoke("getSingleProvince", new object[] {
                        sFrequencyCode,
                        sProvince});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getSingleProvinceAsync(string sFrequencyCode, string sProvince) {
            this.getSingleProvinceAsync(sFrequencyCode, sProvince, null);
        }
        
        /// <remarks/>
        public void getSingleProvinceAsync(string sFrequencyCode, string sProvince, object userState) {
            if ((this.getSingleProvinceOperationCompleted == null)) {
                this.getSingleProvinceOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSingleProvinceOperationCompleted);
            }
            this.InvokeAsync("getSingleProvince", new object[] {
                        sFrequencyCode,
                        sProvince}, this.getSingleProvinceOperationCompleted, userState);
        }
        
        private void OngetSingleProvinceOperationCompleted(object arg) {
            if ((this.getSingleProvinceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSingleProvinceCompleted(this, new getSingleProvinceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/AllProvinces", RequestElementName="AllProvinces", RequestNamespace="http://localhost/webservices/UsedCarWS", ResponseElementName="AllProvincesResponse", ResponseNamespace="http://localhost/webservices/UsedCarWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("AllProvincesResult")]
        public System.Data.DataSet getAllProvinces(string sFrequencyCode) {
            object[] results = this.Invoke("getAllProvinces", new object[] {
                        sFrequencyCode});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getAllProvincesAsync(string sFrequencyCode) {
            this.getAllProvincesAsync(sFrequencyCode, null);
        }
        
        /// <remarks/>
        public void getAllProvincesAsync(string sFrequencyCode, object userState) {
            if ((this.getAllProvincesOperationCompleted == null)) {
                this.getAllProvincesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllProvincesOperationCompleted);
            }
            this.InvokeAsync("getAllProvinces", new object[] {
                        sFrequencyCode}, this.getAllProvincesOperationCompleted, userState);
        }
        
        private void OngetAllProvincesOperationCompleted(object arg) {
            if ((this.getAllProvincesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllProvincesCompleted(this, new getAllProvincesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/HistoricalProvinces", RequestElementName="HistoricalProvinces", RequestNamespace="http://localhost/webservices/UsedCarWS", ResponseElementName="HistoricalProvincesResponse", ResponseNamespace="http://localhost/webservices/UsedCarWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("HistoricalProvincesResult")]
        public System.Data.DataSet getHistoricalProvinces(string sFrequencyCode, System.DateTime sDate) {
            object[] results = this.Invoke("getHistoricalProvinces", new object[] {
                        sFrequencyCode,
                        sDate});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getHistoricalProvincesAsync(string sFrequencyCode, System.DateTime sDate) {
            this.getHistoricalProvincesAsync(sFrequencyCode, sDate, null);
        }
        
        /// <remarks/>
        public void getHistoricalProvincesAsync(string sFrequencyCode, System.DateTime sDate, object userState) {
            if ((this.getHistoricalProvincesOperationCompleted == null)) {
                this.getHistoricalProvincesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetHistoricalProvincesOperationCompleted);
            }
            this.InvokeAsync("getHistoricalProvinces", new object[] {
                        sFrequencyCode,
                        sDate}, this.getHistoricalProvincesOperationCompleted, userState);
        }
        
        private void OngetHistoricalProvincesOperationCompleted(object arg) {
            if ((this.getHistoricalProvincesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getHistoricalProvincesCompleted(this, new getHistoricalProvincesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/StandardEquipmentByCategory", RequestElementName="StandardEquipmentByCategory", RequestNamespace="http://localhost/webservices/UsedCarWS", ResponseElementName="StandardEquipmentByCategoryResponse", ResponseNamespace="http://localhost/webservices/UsedCarWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("StandardEquipmentByCategoryResult")]
        public System.Data.DataSet getStandardEquipment(string sCountryCode, string sUVC, string sCategory) {
            object[] results = this.Invoke("getStandardEquipment", new object[] {
                        sCountryCode,
                        sUVC,
                        sCategory});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getStandardEquipmentAsync(string sCountryCode, string sUVC, string sCategory) {
            this.getStandardEquipmentAsync(sCountryCode, sUVC, sCategory, null);
        }
        
        /// <remarks/>
        public void getStandardEquipmentAsync(string sCountryCode, string sUVC, string sCategory, object userState) {
            if ((this.getStandardEquipmentOperationCompleted == null)) {
                this.getStandardEquipmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetStandardEquipmentOperationCompleted);
            }
            this.InvokeAsync("getStandardEquipment", new object[] {
                        sCountryCode,
                        sUVC,
                        sCategory}, this.getStandardEquipmentOperationCompleted, userState);
        }
        
        private void OngetStandardEquipmentOperationCompleted(object arg) {
            if ((this.getStandardEquipmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getStandardEquipmentCompleted(this, new getStandardEquipmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.WebMethodAttribute(MessageName="getStandardEquipment1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/StandardEquipment", RequestElementName="StandardEquipment", RequestNamespace="http://localhost/webservices/UsedCarWS", ResponseElementName="StandardEquipmentResponse", ResponseNamespace="http://localhost/webservices/UsedCarWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("StandardEquipmentResult")]
        public System.Data.DataSet getStandardEquipment(string sCountryCode, string sUVC) {
            object[] results = this.Invoke("getStandardEquipment1", new object[] {
                        sCountryCode,
                        sUVC});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getStandardEquipment1Async(string sCountryCode, string sUVC) {
            this.getStandardEquipment1Async(sCountryCode, sUVC, null);
        }
        
        /// <remarks/>
        public void getStandardEquipment1Async(string sCountryCode, string sUVC, object userState) {
            if ((this.getStandardEquipment1OperationCompleted == null)) {
                this.getStandardEquipment1OperationCompleted = new System.Threading.SendOrPostCallback(this.OngetStandardEquipment1OperationCompleted);
            }
            this.InvokeAsync("getStandardEquipment1", new object[] {
                        sCountryCode,
                        sUVC}, this.getStandardEquipment1OperationCompleted, userState);
        }
        
        private void OngetStandardEquipment1OperationCompleted(object arg) {
            if ((this.getStandardEquipment1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getStandardEquipment1Completed(this, new getStandardEquipment1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/ColorsByCategory", RequestElementName="ColorsByCategory", RequestNamespace="http://localhost/webservices/UsedCarWS", ResponseElementName="ColorsByCategoryResponse", ResponseNamespace="http://localhost/webservices/UsedCarWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ColorsByCategoryResult")]
        public System.Data.DataSet getColors(string sCountryCode, string sVINYear, string sGroupNumber, string sCategory) {
            object[] results = this.Invoke("getColors", new object[] {
                        sCountryCode,
                        sVINYear,
                        sGroupNumber,
                        sCategory});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getColorsAsync(string sCountryCode, string sVINYear, string sGroupNumber, string sCategory) {
            this.getColorsAsync(sCountryCode, sVINYear, sGroupNumber, sCategory, null);
        }
        
        /// <remarks/>
        public void getColorsAsync(string sCountryCode, string sVINYear, string sGroupNumber, string sCategory, object userState) {
            if ((this.getColorsOperationCompleted == null)) {
                this.getColorsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetColorsOperationCompleted);
            }
            this.InvokeAsync("getColors", new object[] {
                        sCountryCode,
                        sVINYear,
                        sGroupNumber,
                        sCategory}, this.getColorsOperationCompleted, userState);
        }
        
        private void OngetColorsOperationCompleted(object arg) {
            if ((this.getColorsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getColorsCompleted(this, new getColorsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/ColorsByCategoryFullYear", RequestElementName="ColorsByCategoryFullYear", RequestNamespace="http://localhost/webservices/UsedCarWS", ResponseElementName="ColorsByCategoryFullYearResponse", ResponseNamespace="http://localhost/webservices/UsedCarWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ColorsByCategoryFullYearResult")]
        public System.Data.DataSet getColorsByFullYear(string sCountryCode, string sYear, string sGroupNumber, string sCategory) {
            object[] results = this.Invoke("getColorsByFullYear", new object[] {
                        sCountryCode,
                        sYear,
                        sGroupNumber,
                        sCategory});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getColorsByFullYearAsync(string sCountryCode, string sYear, string sGroupNumber, string sCategory) {
            this.getColorsByFullYearAsync(sCountryCode, sYear, sGroupNumber, sCategory, null);
        }
        
        /// <remarks/>
        public void getColorsByFullYearAsync(string sCountryCode, string sYear, string sGroupNumber, string sCategory, object userState) {
            if ((this.getColorsByFullYearOperationCompleted == null)) {
                this.getColorsByFullYearOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetColorsByFullYearOperationCompleted);
            }
            this.InvokeAsync("getColorsByFullYear", new object[] {
                        sCountryCode,
                        sYear,
                        sGroupNumber,
                        sCategory}, this.getColorsByFullYearOperationCompleted, userState);
        }
        
        private void OngetColorsByFullYearOperationCompleted(object arg) {
            if ((this.getColorsByFullYearCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getColorsByFullYearCompleted(this, new getColorsByFullYearCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.WebMethodAttribute(MessageName="getColors1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/Colors", RequestElementName="Colors", RequestNamespace="http://localhost/webservices/UsedCarWS", ResponseElementName="ColorsResponse", ResponseNamespace="http://localhost/webservices/UsedCarWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ColorsResult")]
        public System.Data.DataSet getColors(string sCountryCode, string sVINYear, string sGroupNumber) {
            object[] results = this.Invoke("getColors1", new object[] {
                        sCountryCode,
                        sVINYear,
                        sGroupNumber});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getColors1Async(string sCountryCode, string sVINYear, string sGroupNumber) {
            this.getColors1Async(sCountryCode, sVINYear, sGroupNumber, null);
        }
        
        /// <remarks/>
        public void getColors1Async(string sCountryCode, string sVINYear, string sGroupNumber, object userState) {
            if ((this.getColors1OperationCompleted == null)) {
                this.getColors1OperationCompleted = new System.Threading.SendOrPostCallback(this.OngetColors1OperationCompleted);
            }
            this.InvokeAsync("getColors1", new object[] {
                        sCountryCode,
                        sVINYear,
                        sGroupNumber}, this.getColors1OperationCompleted, userState);
        }
        
        private void OngetColors1OperationCompleted(object arg) {
            if ((this.getColors1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getColors1Completed(this, new getColors1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.WebMethodAttribute(MessageName="getColorsByFullYear1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/ColorsByFullYear", RequestElementName="ColorsByFullYear", RequestNamespace="http://localhost/webservices/UsedCarWS", ResponseElementName="ColorsByFullYearResponse", ResponseNamespace="http://localhost/webservices/UsedCarWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ColorsByFullYearResult")]
        public System.Data.DataSet getColorsByFullYear(string sCountryCode, string sYear, string sGroupNumber) {
            object[] results = this.Invoke("getColorsByFullYear1", new object[] {
                        sCountryCode,
                        sYear,
                        sGroupNumber});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getColorsByFullYear1Async(string sCountryCode, string sYear, string sGroupNumber) {
            this.getColorsByFullYear1Async(sCountryCode, sYear, sGroupNumber, null);
        }
        
        /// <remarks/>
        public void getColorsByFullYear1Async(string sCountryCode, string sYear, string sGroupNumber, object userState) {
            if ((this.getColorsByFullYear1OperationCompleted == null)) {
                this.getColorsByFullYear1OperationCompleted = new System.Threading.SendOrPostCallback(this.OngetColorsByFullYear1OperationCompleted);
            }
            this.InvokeAsync("getColorsByFullYear1", new object[] {
                        sCountryCode,
                        sYear,
                        sGroupNumber}, this.getColorsByFullYear1OperationCompleted, userState);
        }
        
        private void OngetColorsByFullYear1OperationCompleted(object arg) {
            if ((this.getColorsByFullYear1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getColorsByFullYear1Completed(this, new getColorsByFullYear1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/Photo", RequestElementName="Photo", RequestNamespace="http://localhost/webservices/UsedCarWS", ResponseElementName="PhotoResponse", ResponseNamespace="http://localhost/webservices/UsedCarWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("PhotoResult", DataType="base64Binary")]
        public byte[] getPhoto(string sCountryCode, string sUVC) {
            object[] results = this.Invoke("getPhoto", new object[] {
                        sCountryCode,
                        sUVC});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getPhotoAsync(string sCountryCode, string sUVC) {
            this.getPhotoAsync(sCountryCode, sUVC, null);
        }
        
        /// <remarks/>
        public void getPhotoAsync(string sCountryCode, string sUVC, object userState) {
            if ((this.getPhotoOperationCompleted == null)) {
                this.getPhotoOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPhotoOperationCompleted);
            }
            this.InvokeAsync("getPhoto", new object[] {
                        sCountryCode,
                        sUVC}, this.getPhotoOperationCompleted, userState);
        }
        
        private void OngetPhotoOperationCompleted(object arg) {
            if ((this.getPhotoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPhotoCompleted(this, new getPhotoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/PDF", RequestElementName="PDF", RequestNamespace="http://localhost/webservices/UsedCarWS", ResponseElementName="PDFResponse", ResponseNamespace="http://localhost/webservices/UsedCarWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("PDFResult", DataType="base64Binary")]
        public byte[] getPDFSpec(string sCountryCode, string sUVC) {
            object[] results = this.Invoke("getPDFSpec", new object[] {
                        sCountryCode,
                        sUVC});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getPDFSpecAsync(string sCountryCode, string sUVC) {
            this.getPDFSpecAsync(sCountryCode, sUVC, null);
        }
        
        /// <remarks/>
        public void getPDFSpecAsync(string sCountryCode, string sUVC, object userState) {
            if ((this.getPDFSpecOperationCompleted == null)) {
                this.getPDFSpecOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPDFSpecOperationCompleted);
            }
            this.InvokeAsync("getPDFSpec", new object[] {
                        sCountryCode,
                        sUVC}, this.getPDFSpecOperationCompleted, userState);
        }
        
        private void OngetPDFSpecOperationCompleted(object arg) {
            if ((this.getPDFSpecCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPDFSpecCompleted(this, new getPDFSpecCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/TrendAnalysis", RequestElementName="TrendAnalysis", RequestNamespace="http://localhost/webservices/UsedCarWS", ResponseElementName="TrendAnalysisResponse", ResponseNamespace="http://localhost/webservices/UsedCarWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("TrendAnalysisResult")]
        public System.Data.DataSet getTrendAnalysisValues(string sCountryCode, string sUVC, string sAnnualOrMonthly, System.DateTime dStartDate, System.DateTime dEndDate) {
            object[] results = this.Invoke("getTrendAnalysisValues", new object[] {
                        sCountryCode,
                        sUVC,
                        sAnnualOrMonthly,
                        dStartDate,
                        dEndDate});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getTrendAnalysisValuesAsync(string sCountryCode, string sUVC, string sAnnualOrMonthly, System.DateTime dStartDate, System.DateTime dEndDate) {
            this.getTrendAnalysisValuesAsync(sCountryCode, sUVC, sAnnualOrMonthly, dStartDate, dEndDate, null);
        }
        
        /// <remarks/>
        public void getTrendAnalysisValuesAsync(string sCountryCode, string sUVC, string sAnnualOrMonthly, System.DateTime dStartDate, System.DateTime dEndDate, object userState) {
            if ((this.getTrendAnalysisValuesOperationCompleted == null)) {
                this.getTrendAnalysisValuesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetTrendAnalysisValuesOperationCompleted);
            }
            this.InvokeAsync("getTrendAnalysisValues", new object[] {
                        sCountryCode,
                        sUVC,
                        sAnnualOrMonthly,
                        dStartDate,
                        dEndDate}, this.getTrendAnalysisValuesOperationCompleted, userState);
        }
        
        private void OngetTrendAnalysisValuesOperationCompleted(object arg) {
            if ((this.getTrendAnalysisValuesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getTrendAnalysisValuesCompleted(this, new getTrendAnalysisValuesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/VehicleClassifications", RequestElementName="VehicleClassifications", RequestNamespace="http://localhost/webservices/UsedCarWS", ResponseElementName="VehicleClassificationsResponse", ResponseNamespace="http://localhost/webservices/UsedCarWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("VehicleClassificationsResult")]
        public System.Data.DataSet getVehicleClasses() {
            object[] results = this.Invoke("getVehicleClasses", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getVehicleClassesAsync() {
            this.getVehicleClassesAsync(null);
        }
        
        /// <remarks/>
        public void getVehicleClassesAsync(object userState) {
            if ((this.getVehicleClassesOperationCompleted == null)) {
                this.getVehicleClassesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetVehicleClassesOperationCompleted);
            }
            this.InvokeAsync("getVehicleClasses", new object[0], this.getVehicleClassesOperationCompleted, userState);
        }
        
        private void OngetVehicleClassesOperationCompleted(object arg) {
            if ((this.getVehicleClassesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getVehicleClassesCompleted(this, new getVehicleClassesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="UsedCarWSSoap", Namespace="http://localhost/webservices/UsedCarWS")]
    public partial class UsedCarWSSoap : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback getIPAddressOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public UsedCarWSSoap() {
            this.Url = global::WhitmanEnterpriseMVC.Properties.Settings.Default.WhitmanEnterpriseMVC_com_nationalautoresearch_www_UsedCarWS;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event getIPAddressCompletedEventHandler getIPAddressCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/IPAddress", RequestElementName="IPAddress", RequestNamespace="http://localhost/webservices/UsedCarWS", ResponseElementName="IPAddressResponse", ResponseNamespace="http://localhost/webservices/UsedCarWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("IPAddressResult")]
        public string getIPAddress() {
            object[] results = this.Invoke("getIPAddress", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getIPAddressAsync() {
            this.getIPAddressAsync(null);
        }
        
        /// <remarks/>
        public void getIPAddressAsync(object userState) {
            if ((this.getIPAddressOperationCompleted == null)) {
                this.getIPAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetIPAddressOperationCompleted);
            }
            this.InvokeAsync("getIPAddress", new object[0], this.getIPAddressOperationCompleted, userState);
        }
        
        private void OngetIPAddressOperationCompleted(object arg) {
            if ((this.getIPAddressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getIPAddressCompleted(this, new getIPAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/webservices/UsedCarWS")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://localhost/webservices/UsedCarWS", IsNullable=false)]
    public partial class UserCredentials : System.Web.Services.Protocols.SoapHeader {
        
        private string useridField;
        
        private string passwordField;
        
        private string customerField;
        
        private string producttypeField;
        
        private int returncodeField;
        
        private string returnmessageField;
        
        private System.Xml.XmlAttribute[] anyAttrField;
        
        /// <remarks/>
        public string userid {
            get {
                return this.useridField;
            }
            set {
                this.useridField = value;
            }
        }
        
        /// <remarks/>
        public string password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        /// <remarks/>
        public string customer {
            get {
                return this.customerField;
            }
            set {
                this.customerField = value;
            }
        }
        
        /// <remarks/>
        public string producttype {
            get {
                return this.producttypeField;
            }
            set {
                this.producttypeField = value;
            }
        }
        
        /// <remarks/>
        public int returncode {
            get {
                return this.returncodeField;
            }
            set {
                this.returncodeField = value;
            }
        }
        
        /// <remarks/>
        public string returnmessage {
            get {
                return this.returnmessageField;
            }
            set {
                this.returnmessageField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getYearsCompletedEventHandler(object sender, getYearsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getYearsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getYearsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getYears1CompletedEventHandler(object sender, getYears1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getYears1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getYears1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getMakesCompletedEventHandler(object sender, getMakesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getMakesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getMakesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getMakes1CompletedEventHandler(object sender, getMakes1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getMakes1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getMakes1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getModelsCompletedEventHandler(object sender, getModelsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getModelsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getModelsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getModels1CompletedEventHandler(object sender, getModels1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getModels1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getModels1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getSeriesCompletedEventHandler(object sender, getSeriesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSeriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSeriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getSeries1CompletedEventHandler(object sender, getSeries1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSeries1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSeries1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getStylesCompletedEventHandler(object sender, getStylesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getStylesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getStylesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getStyles1CompletedEventHandler(object sender, getStyles1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getStyles1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getStyles1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void applyUSAdjustmentsCompletedEventHandler(object sender, applyUSAdjustmentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class applyUSAdjustmentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal applyUSAdjustmentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void applyUSAdjustments1CompletedEventHandler(object sender, applyUSAdjustments1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class applyUSAdjustments1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal applyUSAdjustments1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void applyUSAdjustments2CompletedEventHandler(object sender, applyUSAdjustments2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class applyUSAdjustments2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal applyUSAdjustments2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void applyCanadianAdjustmentsCompletedEventHandler(object sender, applyCanadianAdjustmentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class applyCanadianAdjustmentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal applyCanadianAdjustmentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void applyCanadianAdjustments1CompletedEventHandler(object sender, applyCanadianAdjustments1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class applyCanadianAdjustments1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal applyCanadianAdjustments1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void applyCanadianAdjustments2CompletedEventHandler(object sender, applyCanadianAdjustments2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class applyCanadianAdjustments2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal applyCanadianAdjustments2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getValuesCompletedEventHandler(object sender, getValuesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getValuesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getValuesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getValues1CompletedEventHandler(object sender, getValues1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getValues1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getValues1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getValues2CompletedEventHandler(object sender, getValues2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getValues2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getValues2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getValues3CompletedEventHandler(object sender, getValues3CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getValues3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getValues3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getVINValuesCompletedEventHandler(object sender, getVINValuesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getVINValuesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getVINValuesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getVINValues1CompletedEventHandler(object sender, getVINValues1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getVINValues1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getVINValues1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getVINValues2CompletedEventHandler(object sender, getVINValues2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getVINValues2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getVINValues2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getVINValues3CompletedEventHandler(object sender, getVINValues3CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getVINValues3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getVINValues3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getVINValues4CompletedEventHandler(object sender, getVINValues4CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getVINValues4CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getVINValues4CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getVINValues5CompletedEventHandler(object sender, getVINValues5CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getVINValues5CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getVINValues5CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getVINValues6CompletedEventHandler(object sender, getVINValues6CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getVINValues6CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getVINValues6CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getVINValues7CompletedEventHandler(object sender, getVINValues7CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getVINValues7CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getVINValues7CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getMileageCompletedEventHandler(object sender, getMileageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getMileageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getMileageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getMileageByFullYearCompletedEventHandler(object sender, getMileageByFullYearCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getMileageByFullYearCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getMileageByFullYearCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getCanadianMileageCompletedEventHandler(object sender, getCanadianMileageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCanadianMileageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCanadianMileageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getCanadianMileageByFullYearCompletedEventHandler(object sender, getCanadianMileageByFullYearCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCanadianMileageByFullYearCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCanadianMileageByFullYearCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getCanadianMileage1CompletedEventHandler(object sender, getCanadianMileage1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCanadianMileage1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCanadianMileage1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getCanadianMileageByFullYear1CompletedEventHandler(object sender, getCanadianMileageByFullYear1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCanadianMileageByFullYear1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCanadianMileageByFullYear1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getMileage1CompletedEventHandler(object sender, getMileage1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getMileage1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getMileage1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getMileageByFullYear1CompletedEventHandler(object sender, getMileageByFullYear1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getMileageByFullYear1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getMileageByFullYear1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getAddDeductsCompletedEventHandler(object sender, getAddDeductsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAddDeductsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAddDeductsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getAddDeductsByFullYearCompletedEventHandler(object sender, getAddDeductsByFullYearCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAddDeductsByFullYearCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAddDeductsByFullYearCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getAddDeducts1CompletedEventHandler(object sender, getAddDeducts1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAddDeducts1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAddDeducts1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getAddDeductsByFullYear1CompletedEventHandler(object sender, getAddDeductsByFullYear1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAddDeductsByFullYear1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAddDeductsByFullYear1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getSingleStateCompletedEventHandler(object sender, getSingleStateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSingleStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSingleStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getAllStatesCompletedEventHandler(object sender, getAllStatesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllStatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllStatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getSingleProvinceCompletedEventHandler(object sender, getSingleProvinceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSingleProvinceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSingleProvinceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getAllProvincesCompletedEventHandler(object sender, getAllProvincesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllProvincesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllProvincesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getHistoricalProvincesCompletedEventHandler(object sender, getHistoricalProvincesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getHistoricalProvincesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getHistoricalProvincesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getStandardEquipmentCompletedEventHandler(object sender, getStandardEquipmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getStandardEquipmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getStandardEquipmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getStandardEquipment1CompletedEventHandler(object sender, getStandardEquipment1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getStandardEquipment1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getStandardEquipment1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getColorsCompletedEventHandler(object sender, getColorsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getColorsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getColorsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getColorsByFullYearCompletedEventHandler(object sender, getColorsByFullYearCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getColorsByFullYearCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getColorsByFullYearCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getColors1CompletedEventHandler(object sender, getColors1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getColors1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getColors1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getColorsByFullYear1CompletedEventHandler(object sender, getColorsByFullYear1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getColorsByFullYear1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getColorsByFullYear1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getPhotoCompletedEventHandler(object sender, getPhotoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPhotoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPhotoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getPDFSpecCompletedEventHandler(object sender, getPDFSpecCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPDFSpecCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPDFSpecCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getTrendAnalysisValuesCompletedEventHandler(object sender, getTrendAnalysisValuesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getTrendAnalysisValuesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getTrendAnalysisValuesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getVehicleClassesCompletedEventHandler(object sender, getVehicleClassesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getVehicleClassesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getVehicleClassesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getIPAddressCompletedEventHandler(object sender, getIPAddressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getIPAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getIPAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591